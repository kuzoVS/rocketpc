import requests
import json
from datetime import datetime

# –ë–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
BASE_URL = "http://localhost:8000"


# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    YELLOW = '\033[93m'
    END = '\033[0m'


def test_create_request():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (–æ—Ç–∫—Ä—ã—Ç—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)"""
    print(f"\n{Colors.BLUE}=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ ==={Colors.END}")

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    request_data = {
        "client_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç {datetime.now().strftime('%H:%M:%S')}",
        "phone": "+7 (999) 123-45-67",
        "email": "test@example.com",
        "device_type": "–ù–æ—É—Ç–±—É–∫",
        "brand": "ASUS",
        "model": "VivoBook 15",
        "problem_description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
        "priority": "–í—ã—Å–æ–∫–∞—è"
    }

    try:
        response = requests.post(f"{BASE_URL}/api/requests", json=request_data)

        if response.status_code == 200:
            result = response.json()
            print(f"{Colors.GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {result['id']}{Colors.END}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
            return result['id']
        else:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {response.status_code}{Colors.END}")
            print(f"   {response.text}")
            return None
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{Colors.END}")
        return None


def test_get_request_status(request_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–æ—Ç–∫—Ä—ã—Ç—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)"""
    print(f"\n{Colors.BLUE}=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ ==={Colors.END}")

    try:
        response = requests.get(f"{BASE_URL}/api/requests/{request_id}/status")

        if response.status_code == 200:
            result = response.json()
            print(f"{Colors.GREEN}‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω{Colors.END}")
            print(f"   ID: {result['id']}")
            print(f"   –ö–ª–∏–µ–Ω—Ç: {result['client_name']}")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {result['device_type']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
        else:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {response.status_code}{Colors.END}")
            print(f"   {response.text}")
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{Colors.END}")


def test_login():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    print(f"\n{Colors.BLUE}=== –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ==={Colors.END}")

    login_data = {
        "username": "admin",
        "password": "admin123"
    }

    try:
        response = requests.post(f"{BASE_URL}/auth/login", json=login_data)

        if response.status_code == 200:
            result = response.json()
            print(f"{Colors.GREEN}‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞{Colors.END}")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result['user']['username']}")
            print(f"   –†–æ–ª—å: {result['user']['role']}")
            return result['access_token']
        else:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}{Colors.END}")
            print(f"   {response.text}")
            return None
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{Colors.END}")
        return None


def test_get_all_requests(token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)"""
    print(f"\n{Colors.BLUE}=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ ==={Colors.END}")

    headers = {"Authorization": f"Bearer {token}"}

    try:
        response = requests.get(f"{BASE_URL}/dashboard/api/requests", headers=headers)

        if response.status_code == 200:
            requests_list = response.json()
            print(f"{Colors.GREEN}‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(requests_list)}{Colors.END}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏
            for i, req in enumerate(requests_list[:3]):
                print(f"   #{req['request_id']} - {req['client_name']} - {req['status']}")

            if len(requests_list) > 3:
                print(f"   ... –∏ –µ—â–µ {len(requests_list) - 3} –∑–∞—è–≤–æ–∫")

            return requests_list[0]['request_id'] if requests_list else None
        else:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {response.status_code}{Colors.END}")
            print(f"   {response.text}")
            return None
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{Colors.END}")
        return None


def test_update_status(token, request_id):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)"""
    print(f"\n{Colors.BLUE}=== –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ ==={Colors.END}")

    headers = {"Authorization": f"Bearer {token}"}
    status_data = {
        "status": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
        "comment": "–ù–∞—á–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    }

    try:
        response = requests.put(
            f"{BASE_URL}/dashboard/api/requests/{request_id}/status",
            json=status_data,
            headers=headers
        )

        if response.status_code == 200:
            print(f"{Colors.GREEN}‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω{Colors.END}")
            print(f"   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_data['status']}")
        else:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {response.status_code}{Colors.END}")
            print(f"   {response.text}")
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{Colors.END}")


def test_archive_request(token, request_id):
    """–¢–µ—Å—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω –∏ —Ä–æ–ª—å)"""
    print(f"\n{Colors.BLUE}=== –¢–µ—Å—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ ==={Colors.END}")

    headers = {"Authorization": f"Bearer {token}"}

    try:
        response = requests.post(
            f"{BASE_URL}/dashboard/api/requests/{request_id}/archive",
            headers=headers
        )

        if response.status_code == 200:
            print(f"{Colors.GREEN}‚úÖ –ó–∞—è–≤–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞{Colors.END}")
        elif response.status_code == 403:
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è{Colors.END}")
        else:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {response.status_code}{Colors.END}")
            print(f"   {response.text}")
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{Colors.END}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"{Colors.YELLOW}üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API ROCKET PC{Colors.END}")
    print(f"–°–µ—Ä–≤–µ—Ä: {BASE_URL}")

    # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (–æ—Ç–∫—Ä—ã—Ç—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    new_request_id = test_create_request()

    # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–æ—Ç–∫—Ä—ã—Ç—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    if new_request_id:
        test_get_request_status(new_request_id)

    # 3. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    token = test_login()

    if token:
        # 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)
        existing_request_id = test_get_all_requests(token)

        # 5. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)
        if existing_request_id:
            test_update_status(token, existing_request_id)

        # 6. –¢–µ—Å—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω –∏ —Ä–æ–ª—å)
        if new_request_id:
            test_archive_request(token, new_request_id)

    print(f"\n{Colors.YELLOW}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ{Colors.END}")


if __name__ == "__main__":
    main()