// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allClients = [];
let filteredClients = [];
let currentPage = 1;
let itemsPerPage = 12;
let sortField = 'name';
let sortOrder = 'asc';
let currentClientId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–≤...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await loadUserInfo();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    await loadClients();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await loadClientStatistics();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
    setupFormHandlers();

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function loadUserInfo() {
    try {
        const res = await fetch("/auth/profile", {
            credentials: "include"
        });

        if (res.status === 401) {
            window.location.href = "/auth/login";
            return;
        }

        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");

        const user = await res.json();

        const userName = document.getElementById('userName');
        const userRole = document.getElementById('userRole');
        const userAvatar = document.getElementById('userAvatar');

        if (userName && user.full_name) {
            userName.textContent = user.full_name;
        }

        if (userRole && user.role) {
            const roleMap = {
                'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
                'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                'master': '–ú–∞—Å—Ç–µ—Ä'
            };
            userRole.textContent = roleMap[user.role] || user.role;
        }

        if (userAvatar && user.full_name) {
            userAvatar.textContent = user.full_name.charAt(0).toUpperCase();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
        if (user.role === 'admin' || user.role === 'director') {
            const usersMenuItem = document.getElementById('usersMenuItem');
            if (usersMenuItem) usersMenuItem.style.display = 'block';
        }

    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
        window.location.href = "/auth/login";
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
async function loadClients(force = false) {
    try {
        console.log('üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤...');

        const response = await fetch('/api/clients', {
            credentials: 'include'
        });

        if (response.status === 401) {
            console.log('‚ùå 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login');
            window.location.href = "/auth/login";
            return;
        }

        if (response.ok) {
            allClients = await response.json();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            filterAndDisplayClients();
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', response.status);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤', 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        showEmptyState('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
async function loadClientStatistics() {
    try {
        console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤...');

        const response = await fetch('/api/clients/statistics', {
            credentials: 'include'
        });

        if (response.ok) {
            const stats = await response.json();
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stats);

            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            updateStatElement('totalClientsCount', stats.total_clients || 0);
            updateStatElement('vipClientsCount', stats.vip_clients || 0);
            updateStatElement('newClientsMonth', stats.new_clients_month || 0);
            updateStatElement('avgRepairsPerClient', (stats.avg_repairs_per_client || 0).toFixed(1));
        } else {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

function updateStatElement(elementId, value) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = value;
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
function filterAndDisplayClients() {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const filterBy = document.getElementById('filterBy').value;

    filteredClients = allClients.filter(client => {
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if (searchTerm) {
            const searchMatch =
                client.full_name.toLowerCase().includes(searchTerm) ||
                client.phone.toLowerCase().includes(searchTerm) ||
                (client.email && client.email.toLowerCase().includes(searchTerm));

            if (!searchMatch) return false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        switch (filterBy) {
            case 'vip':
                return client.is_vip;
            case 'active':
                return client.active_requests > 0;
            case 'new':
                const createdDate = new Date(client.created_at);
                const monthAgo = new Date();
                monthAgo.setMonth(monthAgo.getMonth() - 1);
                return createdDate > monthAgo;
            default:
                return true;
        }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º
    sortClients();

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    currentPage = 1;
    displayClients();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    document.getElementById('clientsCount').textContent = `${filteredClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`;
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
function sortClients() {
    const sortBy = document.getElementById('sortBy').value;

    filteredClients.sort((a, b) => {
        let valueA, valueB;

        switch (sortBy) {
            case 'name':
                valueA = a.full_name.toLowerCase();
                valueB = b.full_name.toLowerCase();
                break;
            case 'date':
                valueA = new Date(a.created_at);
                valueB = new Date(b.created_at);
                break;
            case 'repairs':
                valueA = a.total_requests || 0;
                valueB = b.total_requests || 0;
                break;
            case 'spending':
                valueA = a.total_spent || 0;
                valueB = b.total_spent || 0;
                break;
            default:
                valueA = a.full_name.toLowerCase();
                valueB = b.full_name.toLowerCase();
        }

        if (valueA < valueB) return sortOrder === 'asc' ? -1 : 1;
        if (valueA > valueB) return sortOrder === 'asc' ? 1 : -1;
        return 0;
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
function displayClients() {
    const container = document.getElementById('clientsGrid');

    if (filteredClients.length === 0) {
        showEmptyState();
        return;
    }

    // –†–∞—Å—á–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageClients = filteredClients.slice(startIndex, endIndex);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∫–∞—Ä—Ç–æ—á–µ–∫
    container.innerHTML = pageClients.map(client => createClientCard(client)).join('');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    updatePagination();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
function createClientCard(client) {
    const avatar = client.full_name.charAt(0).toUpperCase();
    const vipBadge = client.is_vip ? '<div class="vip-badge">VIP</div>' : '';
    const totalSpent = client.total_spent || 0;
    const totalRequests = client.total_requests || 0;
    const activeRequests = client.active_requests || 0;

    return `
        <div class="client-card" onclick="openClientDetail(${client.id})">
            ${vipBadge}
            <div class="client-avatar">${avatar}</div>
            <div class="client-name">${client.full_name}</div>
            <div class="client-info">
                <span>üìû</span> ${client.phone}
            </div>
            ${client.email ? `
                <div class="client-info">
                    <span>üìß</span> ${client.email}
                </div>
            ` : ''}
            <div class="client-info">
                <span>üìÖ</span> ${formatDate(client.created_at)}
            </div>
            <div class="client-stats">
                <div class="client-stat">
                    <div class="client-stat-value">${totalRequests}</div>
                    <div class="client-stat-label">–ó–∞—è–≤–æ–∫</div>
                </div>
                <div class="client-stat">
                    <div class="client-stat-value">${activeRequests}</div>
                    <div class="client-stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                </div>
                <div class="client-stat">
                    <div class="client-stat-value">‚ÇΩ${totalSpent.toLocaleString('ru-RU')}</div>
                    <div class="client-stat-label">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
                </div>
            </div>
            <div class="client-actions">
                <button class="btn btn-outline btn-sm" onclick="event.stopPropagation(); createRequestForClient(${client.id})">
                    üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
                </button>
                <button class="btn btn-outline btn-sm" onclick="event.stopPropagation(); openClientDetail(${client.id})">
                    üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
            </div>
        </div>
    `;
}

// –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
function showEmptyState(message = '–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã') {
    const container = document.getElementById('clientsGrid');
    container.innerHTML = `
        <div class="empty-state" style="grid-column: 1 / -1;">
            <div class="empty-state-icon">üë•</div>
            <h3 style="color: #00ffff; margin-bottom: 1rem;">${message}</h3>
            <p style="color: rgba(255,255,255,0.6);">
                ${message === '–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞' : ''}
            </p>
            ${message === '–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' ? `
                <button class="btn" onclick="openNewClientModal()" style="margin-top: 1rem;">
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                </button>
            ` : ''}
        </div>
    `;

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    document.getElementById('pagination').innerHTML = '';
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
function updatePagination() {
    const totalPages = Math.ceil(filteredClients.length / itemsPerPage);
    const pagination = document.getElementById('pagination');

    if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
    }

    let html = '';

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    html += `<button class="page-btn" onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>
        ‚Üê –ù–∞–∑–∞–¥
    </button>`;

    // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    for (let i = 1; i <= totalPages; i++) {
        if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
            html += `<button class="page-btn ${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">
                ${i}
            </button>`;
        } else if (i === currentPage - 3 || i === currentPage + 3) {
            html += '<span style="color: rgba(255,255,255,0.5);">...</span>';
        }
    }

    // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    html += `<button class="page-btn" onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>
        –í–ø–µ—Ä–µ–¥ ‚Üí
    </button>`;

    pagination.innerHTML = html;
}

function changePage(page) {
    const totalPages = Math.ceil(filteredClients.length / itemsPerPage);
    if (page < 1 || page > totalPages) return;

    currentPage = page;
    displayClients();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function searchClients() {
    filterAndDisplayClients();
}

function filterClients() {
    filterAndDisplayClients();
}

function changeItemsPerPage() {
    itemsPerPage = parseInt(document.getElementById('itemsPerPage').value);
    currentPage = 1;
    displayClients();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
function openNewClientModal() {
    document.getElementById('newClientForm').reset();
    document.getElementById('newClientVip').value = 'false';
    openModal('newClientModal');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
async function openClientDetail(clientId) {
    try {
        console.log('üë§ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞:', clientId);
        currentClientId = clientId;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        const response = await fetch(`/api/clients/${clientId}`, {
            credentials: 'include'
        });

        if (!response.ok) {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞', 'error');
            return;
        }

        const client = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', client);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        document.getElementById('detailClientName').textContent = client.full_name;
        document.getElementById('detailClientPhone').textContent = client.phone;
        document.getElementById('detailClientEmail').textContent = client.email || '–ù–µ —É–∫–∞–∑–∞–Ω';
        document.getElementById('detailClientCreated').textContent = formatDate(client.created_at);
        document.getElementById('detailClientTotalRequests').textContent = client.total_requests || 0;
        document.getElementById('detailClientTotalSpent').textContent = `‚ÇΩ${(client.total_spent || 0).toLocaleString('ru-RU')}`;
        document.getElementById('detailClientAddress').textContent = client.address || '–ù–µ —É–∫–∞–∑–∞–Ω';
        document.getElementById('detailClientNotes').textContent = client.notes || '–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫';

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('editClientName').value = client.full_name;
        document.getElementById('editClientPhone').value = client.phone;
        document.getElementById('editClientEmail').value = client.email || '';
        document.getElementById('editClientVip').value = client.is_vip ? 'true' : 'false';
        document.getElementById('editClientAddress').value = client.address || '';
        document.getElementById('editClientNotes').value = client.notes || '';

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫
        await loadClientRequests(clientId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        await loadClientDevices(clientId);

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        switchDetailTab('info');

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        openModal('clientDetailModal');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
async function loadClientRequests(clientId) {
    try {
        const response = await fetch(`/api/clients/${clientId}/requests`, {
            credentials: 'include'
        });

        if (response.ok) {
            const requests = await response.json();
            renderClientRequests(requests);
        } else {
            document.getElementById('clientRequestsList').innerHTML = `
                <div style="text-align: center; padding: 2rem; color: rgba(255,255,255,0.6);">
                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫
                </div>
            `;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        document.getElementById('clientRequestsList').innerHTML = `
            <div style="text-align: center; padding: 2rem; color: rgba(255,255,255,0.6);">
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫
            </div>
        `;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
function renderClientRequests(requests) {
    const container = document.getElementById('clientRequestsList');

    if (!requests.length) {
        container.innerHTML = `
            <div style="text-align: center; padding: 2rem; color: rgba(255,255,255,0.6);">
                <h4>–£ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫</h4>
                <button class="btn" onclick="createRequestForClient(${currentClientId})" style="margin-top: 1rem;">
                    üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
                </button>
            </div>
        `;
        return;
    }

    container.innerHTML = requests.map(request => `
        <div class="request-item">
            <div class="request-header">
                <div class="request-id">#${request.request_id}</div>
                <div class="request-date">${formatDate(request.created_at)}</div>
            </div>
            <div class="request-device">
                <strong>${request.device_type}</strong>
                ${request.brand ? ` ${request.brand}` : ''}
                ${request.model ? ` ${request.model}` : ''}
            </div>
            <div class="request-problem">${truncateText(request.problem_description, 100)}</div>
            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 0.5rem;">
                <span class="status-badge ${getStatusClass(request.status)}">${request.status}</span>
                ${request.final_cost ? `<span style="color: #00ff00;">‚ÇΩ${request.final_cost.toLocaleString('ru-RU')}</span>` : ''}
            </div>
            ${request.master_name ? `
                <div style="font-size: 0.85rem; color: rgba(255,255,255,0.7); margin-top: 0.25rem;">
                    üîß –ú–∞—Å—Ç–µ—Ä: ${request.master_name}
                </div>
            ` : ''}
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç–∞
async function loadClientDevices(clientId) {
    try {
        const response = await fetch(`/api/clients/${clientId}`, {
            credentials: 'include'
        });

        if (response.ok) {
            const client = await response.json();
            renderClientDevices(client.device_types || []);
        } else {
            document.getElementById('clientDevicesList').innerHTML = `
                <div style="text-align: center; padding: 2rem; color: rgba(255,255,255,0.6);">
                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
                </div>
            `;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        document.getElementById('clientDevicesList').innerHTML = `
            <div style="text-align: center; padding: 2rem; color: rgba(255,255,255,0.6);">
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            </div>
        `;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç–∞
function renderClientDevices(devices) {
    const container = document.getElementById('clientDevicesList');

    if (!devices.length) {
        container.innerHTML = `
            <div style="text-align: center; padding: 2rem; color: rgba(255,255,255,0.6);">
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</h4>
                <p>–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫</p>
            </div>
        `;
        return;
    }

    const deviceIcons = {
        '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π –ü–ö': 'üñ•Ô∏è',
        '–ù–æ—É—Ç–±—É–∫': 'üíª',
        '–ú–æ–Ω–æ–±–ª–æ–∫': 'üñ•Ô∏è',
        '–°–µ—Ä–≤–µ—Ä': 'üóÑÔ∏è',
        '–î—Ä—É–≥–æ–µ': 'üì±'
    };

    container.innerHTML = devices.map(device => `
        <div style="background: rgba(0, 255, 255, 0.05); border-radius: 8px; padding: 1rem; margin-bottom: 1rem; border: 1px solid rgba(0, 255, 255, 0.1);">
            <div style="display: flex; align-items: center; gap: 1rem;">
                <div style="font-size: 2rem;">${deviceIcons[device.device_type] || 'üì±'}</div>
                <div>
                    <div style="font-weight: 600; color: #00ffff; margin-bottom: 0.25rem;">
                        ${device.device_type}
                    </div>
                    <div style="font-size: 0.9rem; color: rgba(255,255,255,0.8);">
                        –û–±—Å–ª—É–∂–∏–≤–∞–ª—Å—è: ${device.count} —Ä–∞–∑
                    </div>
                    <div style="font-size: 0.85rem; color: rgba(255,255,255,0.6);">
                        –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–º–æ–Ω—Ç: ${formatDate(device.last_repair)}
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function switchDetailTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.detail-tab-content').forEach(content => {
        content.classList.remove('active');
    });

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.detail-tab').forEach(tab => {
        tab.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const targetContent = document.getElementById(tabName + 'DetailTab');
    if (targetContent) {
        targetContent.classList.add('active');
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
    const targetTab = Array.from(document.querySelectorAll('.detail-tab')).find(tab =>
        tab.getAttribute('onclick') && tab.getAttribute('onclick').includes(tabName)
    );
    if (targetTab) {
        targetTab.classList.add('active');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
function setupFormHandlers() {
    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const newClientForm = document.getElementById('newClientForm');
    if (newClientForm) {
        newClientForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';

            try {
                const clientData = {
                    full_name: document.getElementById('newClientName').value.trim(),
                    phone: document.getElementById('newClientPhone').value.trim(),
                    email: document.getElementById('newClientEmail').value.trim() || null,
                    address: document.getElementById('newClientAddress').value.trim() || null,
                    is_vip: document.getElementById('newClientVip').value === 'true',
                    notes: document.getElementById('newClientNotes').value.trim() || null
                };

                const success = await createClient(clientData);
                if (success) {
                    closeModal('newClientModal');
                    await loadClients();
                    await loadClientStatistics();
                }
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        });
    }

    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const editClientForm = document.getElementById('editClientForm');
    if (editClientForm) {
        editClientForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';

            try {
                const clientData = {
                    full_name: document.getElementById('editClientName').value.trim(),
                    phone: document.getElementById('editClientPhone').value.trim(),
                    email: document.getElementById('editClientEmail').value.trim() || null,
                    address: document.getElementById('editClientAddress').value.trim() || null,
                    is_vip: document.getElementById('editClientVip').value === 'true',
                    notes: document.getElementById('editClientNotes').value.trim() || null
                };

                const success = await updateClient(currentClientId, clientData);
                if (success) {
                    closeModal('clientDetailModal');
                    await loadClients();
                    await loadClientStatistics();
                }
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        });
    }
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function createClient(clientData) {
    try {
        console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', clientData);

        const response = await fetch('/api/clients', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(clientData)
        });

        if (response.ok) {
            const result = await response.json();
            showNotification(`–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω! ID: ${result.id}`, 'success');
            return true;
        } else {
            const error = await response.json();
            showNotification(error.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞', 'error');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        return false;
    }
}

async function updateClient(clientId, clientData) {
    try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', clientId, clientData);

        const response = await fetch(`/api/clients/${clientId}`, {
            method: 'PUT',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(clientData)
        });

        if (response.ok) {
            showNotification('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
            return true;
        } else {
            const error = await response.json();
            showNotification(error.detail || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞', 'error');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        return false;
    }
}

async function deleteClient() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;

    try {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', currentClientId);

        const response = await fetch(`/api/clients/${currentClientId}`, {
            method: 'DELETE',
            credentials: 'include'
        });

        if (response.ok) {
            showNotification('–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω', 'success');
            closeModal('clientDetailModal');
            await loadClients();
            await loadClientStatistics();
        } else {
            const error = await response.json();
            showNotification(error.detail || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
function createRequestForClient(clientId) {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
    const client = allClients.find(c => c.id === clientId);
    if (client) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ localStorage –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        localStorage.setItem('preselectedClient', JSON.stringify({
            id: client.id,
            name: client.full_name,
            phone: client.phone,
            email: client.email
        }));

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫
        window.location.href = '/dashboard/requests';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
function exportClients() {
    const csvContent = [
        ['ID', '–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Email', '–ê–¥—Ä–µ—Å', 'VIP', '–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫', '–ü–æ—Ç—Ä–∞—á–µ–Ω–æ', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'],
        ...filteredClients.map(c => [
            c.id,
            c.full_name,
            c.phone,
            c.email || '',
            c.address || '',
            c.is_vip ? '–î–∞' : '–ù–µ—Ç',
            c.total_requests || 0,
            c.total_spent || 0,
            formatDate(c.created_at)
        ])
    ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');

    const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `–∫–ª–∏–µ–Ω—Ç—ã_${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

function truncateText(text, maxLength) {
    if (!text) return '';
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
}
