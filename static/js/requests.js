// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('üìÑ –°–∫—Ä–∏–ø—Ç requests –∑–∞–≥—Ä—É–∂–µ–Ω');

async function loadRequests() {
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏...');
    const container = document.getElementById('requestsContainer');

    try {
        const token = localStorage.getItem('access_token');
        const response = await fetch('/dashboard/api/requests', {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.status === 401) {
            console.log('‚ùå 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login');
            logout();
            return;
        }

        if (response.ok) {
            const requests = await response.json();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${requests.length} –∑–∞—è–≤–æ–∫`);

            if (requests.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: rgba(255,255,255,0.6); padding: 2rem;">üìù –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
                return;
            }

            // –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
            container.innerHTML = `
                <div style="overflow-x: auto;">
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead>
                            <tr style="background: rgba(0, 255, 255, 0.1);">
                                <th style="padding: 1rem; color: #00ffff; border-bottom: 2px solid rgba(0, 255, 255, 0.3);">ID</th>
                                <th style="padding: 1rem; color: #00ffff; border-bottom: 2px solid rgba(0, 255, 255, 0.3);">–ö–ª–∏–µ–Ω—Ç</th>
                                <th style="padding: 1rem; color: #00ffff; border-bottom: 2px solid rgba(0, 255, 255, 0.3);">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</th>
                                <th style="padding: 1rem; color: #00ffff; border-bottom: 2px solid rgba(0, 255, 255, 0.3);">–°—Ç–∞—Ç—É—Å</th>
                                <th style="padding: 1rem; color: #00ffff; border-bottom: 2px solid rgba(0, 255, 255, 0.3);">–î–∞—Ç–∞</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${requests.map(req => `
                                <tr style="border-bottom: 1px solid rgba(255, 255, 255, 0.1);">
                                    <td style="padding: 1rem; color: #00ffff; font-weight: bold;">#${req.request_id}</td>
                                    <td style="padding: 1rem;">${req.client_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                                    <td style="padding: 1rem;">${req.device_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                                    <td style="padding: 1rem;">
                                        <span style="
                                            background: rgba(0, 255, 255, 0.2);
                                            color: #00ffff;
                                            padding: 0.25rem 0.75rem;
                                            border-radius: 20px;
                                            font-size: 0.85rem;
                                        ">${req.status}</span>
                                    </td>
                                    <td style="padding: 1rem;">${new Date(req.created_at).toLocaleDateString('ru-RU')}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', response.status);
            container.innerHTML = '<p style="text-align: center; color: #ff4444; padding: 2rem;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</p>';
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        container.innerHTML = '<p style="text-align: center; color: #ff4444; padding: 2rem;">‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>';
    }
}

async function testCreateRequest() {
    console.log('üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏...');

    const testData = {
        client_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
        phone: '+7 (999) 123-45-67',
        email: 'test@example.com',
        device_type: '–ù–æ—É—Ç–±—É–∫',
        problem_description: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
    };

    try {
        const response = await fetch('/api/requests', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(testData)
        });

        if (response.ok) {
            const result = await response.json();
            alert(`‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ${result.id}`);
            loadRequests(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            const error = await response.json();
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.detail}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
}

function logout() {
    console.log('üö™ –í—ã—Ö–æ–¥');
    localStorage.removeItem('access_token');
    localStorage.removeItem('user');
    window.location.replace('/auth/login');
}

// –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(loadRequests, 500);
});

console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –≥–æ—Ç–æ–≤–∞');