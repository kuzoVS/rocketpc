// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allRequests = [];
let filteredRequests = [];
let currentPage = 1;
let itemsPerPage = 10;
let sortField = 'date';
let sortOrder = 'desc';
let currentEditRequestId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—è–≤–æ–∫...');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.getElementById('pageBody').style.display = 'block';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    loadUserInfo();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏
    await loadRequests();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
    setupFormHandlers();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞
    setupLogoutHandlers();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function loadUserInfo() {
    try {
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', user.username);

        const userName = document.getElementById('userName');
        const userRole = document.getElementById('userRole');
        const userAvatar = document.getElementById('userAvatar');

        if (userName && user.full_name) {
            userName.textContent = user.full_name;
        }

        if (userRole && user.role) {
            const roleMap = {
                'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
                'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                'master': '–ú–∞—Å—Ç–µ—Ä'
            };
            userRole.textContent = roleMap[user.role] || user.role;
        }

        if (userAvatar && user.full_name) {
            userAvatar.textContent = user.full_name.charAt(0).toUpperCase();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (user.role === 'admin' || user.role === 'director') {
            const usersMenuItem = document.getElementById('usersMenuItem');
            if (usersMenuItem) usersMenuItem.style.display = 'block';
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ API
async function loadRequests() {
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏...');

    try {
        const token = localStorage.getItem('access_token');
        const response = await fetch('/dashboard/api/requests', {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.status === 401) {
            console.log('‚ùå 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login');
            logout();
            return;
        }

        if (response.ok) {
            allRequests = await response.json();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allRequests.length} –∑–∞—è–≤–æ–∫`);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filterRequests();
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', response.status);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫', 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
async function createRequest(requestData) {
    try {
        console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', requestData);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/requests –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        const response = await fetch('/api/requests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });

        const responseText = await response.text();
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, responseText);

        let result;
        try {
            result = JSON.parse(responseText);
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
            showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞', 'error');
            return;
        }

        if (response.ok) {
            showNotification(`–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ${result.id}`, 'success');
            closeModal('newRequestModal');
            await loadRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            return result;
        } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏';

            if (result.detail) {
                if (typeof result.detail === 'string') {
                    errorMessage = result.detail;
                } else if (Array.isArray(result.detail)) {
                    // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç FastAPI
                    errorMessage = result.detail.map(err => err.msg).join(', ');
                } else if (typeof result.detail === 'object') {
                    errorMessage = JSON.stringify(result.detail);
                }
            } else if (result.message) {
                errorMessage = result.message;
            }

            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorMessage);
            showNotification(errorMessage, 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ API
async function updateRequestStatus(requestId, newStatus, comment = '') {
    try {
        const token = localStorage.getItem('access_token');
        const response = await fetch(`/dashboard/api/requests/${requestId}/status`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                status: newStatus,
                comment: comment
            })
        });

        if (response.ok) {
            showNotification('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
            closeModal('editRequestModal');
            await loadRequests();
        } else {
            const error = await response.json();
            showNotification(error.detail || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

// –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function archiveRequest(requestId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) return;

    try {
        const token = localStorage.getItem('access_token');
        const response = await fetch(`/dashboard/api/requests/${requestId}/archive`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (response.ok) {
            showNotification('–ó–∞—è–≤–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞', 'success');
            await loadRequests();
        } else {
            const error = await response.json();
            showNotification(error.detail || '–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
function setupFormHandlers() {
    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    const newRequestForm = document.getElementById('newRequestForm');
    if (newRequestForm) {
        newRequestForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            const clientName = document.getElementById('clientName').value.trim();
            const clientPhone = document.getElementById('clientPhone').value.trim();
            const clientEmail = document.getElementById('clientEmail').value.trim();
            const deviceType = document.getElementById('deviceType').value;
            const deviceBrand = document.getElementById('deviceBrand').value.trim();
            const deviceModel = document.getElementById('deviceModel').value.trim();
            const problemDescription = document.getElementById('problemDescription').value.trim();
            const priority = document.getElementById('priority').value || '–û–±—ã—á–Ω–∞—è';

            // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (!clientName || clientName.length < 2) {
                showNotification('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞', 'error');
                return;
            }

            if (!clientPhone || clientPhone.length < 10) {
                showNotification('–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
                return;
            }

            if (!deviceType) {
                showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 'error');
                return;
            }

            if (!problemDescription || problemDescription.length < 10) {
                showNotification('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
                return;
            }

            const requestData = {
                client_name: clientName,
                phone: clientPhone,
                email: clientEmail || '',
                device_type: deviceType,
                problem_description: problemDescription,
                priority: priority
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if (deviceBrand) requestData.brand = deviceBrand;
            if (deviceModel) requestData.model = deviceModel;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';

            try {
                await createRequest(requestData);
            } finally {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        });
    }
}
    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
const editRequestForm = document.getElementById('editRequestForm');
if (editRequestForm) {
    editRequestForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        const newStatus = document.getElementById('editStatus').value;
        const comment = document.getElementById('editComment').value;
        const masterId = document.getElementById('editMaster').value; // –î–æ–±–∞–≤–∏—Ç—å
        const estimatedCost = document.getElementById('editEstimatedCost').value; // –î–æ–±–∞–≤–∏—Ç—å

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const submitButton = e.target.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await updateRequestStatus(currentEditRequestId, newStatus, comment);

            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –º–∞—Å—Ç–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            if (masterId !== undefined) {
                await updateMasterAssignment(currentEditRequestId, masterId);
            }

            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            if (estimatedCost) {
                await updateEstimatedCost(currentEditRequestId, estimatedCost);
            }

        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            submitButton.disabled = false;
            submitButton.textContent = originalText;
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
async function updateMasterAssignment(requestId, masterId) {
    try {
        const token = localStorage.getItem('access_token');

        if (masterId) {
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
            await fetch(`/dashboard/api/requests/${requestId}/assign-master`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ master_id: parseInt(masterId) })
            });
        } else {
            // –°–Ω–∏–º–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
            await fetch(`/dashboard/api/requests/${requestId}/unassign-master`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${token}` }
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:', error);
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
function filterRequests() {
    const searchValue = document.getElementById('searchInput').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const periodFilter = document.getElementById('periodFilter').value;

    filteredRequests = allRequests.filter(request => {
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if (searchValue) {
            const searchMatch =
                request.request_id.toLowerCase().includes(searchValue) ||
                request.client_name.toLowerCase().includes(searchValue) ||
                request.device_type.toLowerCase().includes(searchValue) ||
                (request.problem_description || '').toLowerCase().includes(searchValue);

            if (!searchMatch) return false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (statusFilter && request.status !== statusFilter) return false;

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if (priorityFilter && request.priority !== priorityFilter) return false;

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if (periodFilter) {
            const requestDate = new Date(request.created_at);
            const now = new Date();

            switch (periodFilter) {
                case 'today':
                    if (requestDate.toDateString() !== now.toDateString()) return false;
                    break;
                case 'week':
                    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    if (requestDate < weekAgo) return false;
                    break;
                case 'month':
                    const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                    if (requestDate < monthAgo) return false;
                    break;
            }
        }

        return true;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
    sortRequests();
    currentPage = 1;
    displayRequests();
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞—è–≤–æ–∫
function sortTable(field) {
    if (sortField === field) {
        sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
    } else {
        sortField = field;
        sortOrder = 'asc';
    }

    sortRequests();
    displayRequests();
}

function sortRequests() {
    filteredRequests.sort((a, b) => {
        let valueA, valueB;

        switch (sortField) {
            case 'id':
                valueA = a.request_id;
                valueB = b.request_id;
                break;
            case 'client':
                valueA = a.client_name;
                valueB = b.client_name;
                break;
            case 'device':
                valueA = a.device_type;
                valueB = b.device_type;
                break;
            case 'status':
                valueA = a.status;
                valueB = b.status;
                break;
            case 'priority':
                const priorityOrder = { '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è': 4, '–í—ã—Å–æ–∫–∞—è': 3, '–û–±—ã—á–Ω–∞—è': 2, '–ù–∏–∑–∫–∞—è': 1 };
                valueA = priorityOrder[a.priority] || 2;
                valueB = priorityOrder[b.priority] || 2;
                break;
            case 'date':
                valueA = new Date(a.created_at);
                valueB = new Date(b.created_at);
                break;
            default:
                valueA = a[sortField];
                valueB = b[sortField];
        }

        if (valueA < valueB) return sortOrder === 'asc' ? -1 : 1;
        if (valueA > valueB) return sortOrder === 'asc' ? 1 : -1;
        return 0;
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
function displayRequests() {
    const tbody = document.getElementById('requestsTableBody');

    if (filteredRequests.length === 0) {
        tbody.innerHTML = '<tr><td colspan="9" style="text-align: center; padding: 3rem; color: rgba(255,255,255,0.6);">–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        document.getElementById('pagination').innerHTML = '';
        return;
    }

    // –†–∞—Å—á–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageRequests = filteredRequests.slice(startIndex, endIndex);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ç–∞–±–ª–∏—Ü—ã
    tbody.innerHTML = pageRequests.map(request => {
        const statusClass = getStatusClass(request.status);
        const priorityClass = getPriorityClass(request.priority);

        return `
            <tr>
                <td style="color: #00ffff; font-weight: bold;">#${request.request_id}</td>
                <td>${request.client_name}</td>
                <td>${request.device_type} ${request.brand ? `(${request.brand})` : ''}</td>
                <td title="${request.problem_description}">${truncateText(request.problem_description, 50)}</td>
                <td><span class="status-badge ${statusClass}">${request.status}</span></td>
                <td><span class="priority-badge ${priorityClass}">${request.priority || '–û–±—ã—á–Ω–∞—è'}</span></td>
                <td>${request.master_name || '-'}</td>
                <td>${formatDate(request.created_at)}</td>
                <td>
                    <div class="table-actions">
                        <button class="btn btn-icon btn-edit" onclick="openEditModal('${request.request_id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            ‚úèÔ∏è
                        </button>
                        <button class="btn btn-icon btn-delete" onclick="archiveRequest('${request.request_id}')" title="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å">
                            üìÅ
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    updatePagination();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function updatePagination() {
    const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);
    const pagination = document.getElementById('pagination');

    if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
    }

    let html = '';

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    html += `<button class="page-btn" onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>
        ‚Üê –ù–∞–∑–∞–¥
    </button>`;

    // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    for (let i = 1; i <= totalPages; i++) {
        if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
            html += `<button class="page-btn ${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">
                ${i}
            </button>`;
        } else if (i === currentPage - 3 || i === currentPage + 3) {
            html += '<span style="color: rgba(255,255,255,0.5);">...</span>';
        }
    }

    // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    html += `<button class="page-btn" onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>
        –í–ø–µ—Ä–µ–¥ ‚Üí
    </button>`;

    pagination.innerHTML = html;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function changePage(page) {
    const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);
    if (page < 1 || page > totalPages) return;

    currentPage = page;
    displayRequests();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
function openNewRequestModal() {
    document.getElementById('newRequestForm').reset();
    document.getElementById('priority').value = '–û–±—ã—á–Ω–∞—è';
    document.querySelectorAll('.status-option').forEach(btn => {
        btn.classList.toggle('active', btn.textContent === '–û–±—ã—á–Ω–∞—è');
    });
    openModal('newRequestModal');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function openEditModal(requestId) {
    const request = allRequests.find(r => r.request_id === requestId);
    if (!request) return;

    currentEditRequestId = requestId;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    document.getElementById('editRequestId').textContent = `#${request.request_id}`;
    document.getElementById('editCreatedAt').textContent = formatDate(request.created_at);
    document.getElementById('editClientInfo').textContent = `${request.client_name} (${request.client_phone})`;
    document.getElementById('editDeviceInfo').textContent = `${request.device_type} ${request.brand || ''} ${request.model || ''}`;
    document.getElementById('editProblemDescription').value = request.problem_description;
    document.getElementById('editStatus').value = request.status;
    document.getElementById('editPriority').value = request.priority || '–û–±—ã—á–Ω–∞—è';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
    await loadMasters();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    const masterSelect = document.getElementById('editMaster');
    if (masterSelect && request.assigned_master_id) {
        masterSelect.value = request.assigned_master_id;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    document.getElementById('editComment').value = '';

    openModal('editRequestModal');
}

async function loadMasters() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤...');
        const token = localStorage.getItem('access_token');
        const response = await fetch('/dashboard/api/masters/available', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        console.log('üì° –û—Ç–≤–µ—Ç API:', response.status);
        if (response.ok) {
            const masters = await response.json();
            const masterSelect = document.getElementById('editMaster');
            console.log('üéØ Select —ç–ª–µ–º–µ–Ω—Ç:', masterSelect);

            if (masterSelect) {
                masterSelect.innerHTML = '<option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>';

                masters.forEach(master => {
                    const option = document.createElement('option');
                    option.value = master.id;
                    option.textContent = `${master.full_name} (–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${master.active_repairs}/${master.max_concurrent_repairs})`;

                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (master.specialization) {
                        option.textContent += ` - ${master.specialization}`;
                    }

                    // –û—Ç–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω
                    if (!master.is_available || master.active_repairs >= master.max_concurrent_repairs) {
                        option.disabled = true;
                        option.textContent += ' (–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω)';
                    }

                    masterSelect.appendChild(option);
                });
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
    }
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusClass(status) {
    const statusMap = {
        '–ü—Ä–∏–Ω—è—Ç–∞': 'status-new',
        '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': 'status-in-progress',
        '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π': 'status-pending',
        '–í —Ä–µ–º–æ–Ω—Ç–µ': 'status-in-progress',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'status-in-progress',
        '–ì–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–µ': 'status-completed',
        '–í—ã–¥–∞–Ω–∞': 'status-completed'
    };
    return statusMap[status] || 'status-new';
}

function getPriorityClass(priority) {
    const priorityMap = {
        '–ù–∏–∑–∫–∞—è': 'priority-low',
        '–û–±—ã—á–Ω–∞—è': 'priority-normal',
        '–í—ã—Å–æ–∫–∞—è': 'priority-high',
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è': 'priority-critical'
    };
    return priorityMap[priority] || 'priority-normal';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function truncateText(text, maxLength) {
    if (!text) return '';
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
function openModal(modalId) {
    document.getElementById(modalId).style.display = 'flex';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
function setPriority(button, priority) {
    document.querySelectorAll('.status-option').forEach(btn => {
        btn.classList.remove('active');
    });
    button.classList.add('active');
    document.getElementById('priority').value = priority;
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.notification').forEach(el => el.remove());

    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        background: ${type === 'error' ? 'rgba(255, 0, 0, 0.2)' : 'rgba(0, 255, 0, 0.2)'};
        border: 1px solid ${type === 'error' ? 'rgba(255, 0, 0, 0.3)' : 'rgba(0, 255, 0, 0.3)'};
        color: ${type === 'error' ? '#ff4444' : '#00ff00'};
        border-radius: 12px;
        z-index: 3000;
        animation: slideInRight 0.4s ease-out;
        max-width: 400px;
        word-wrap: break-word;
    `;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.4s ease-out';
        setTimeout(() => notification.remove(), 400);
    }, 4000);
}

// –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫
function exportRequests() {
    const csvContent = [
        ['ID', '–ö–ª–∏–µ–Ω—Ç', '–¢–µ–ª–µ—Ñ–æ–Ω', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–ü—Ä–æ–±–ª–µ–º–∞', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–î–∞—Ç–∞'],
        ...filteredRequests.map(r => [
            r.request_id,
            r.client_name,
            r.client_phone || '',
            `${r.device_type} ${r.brand || ''} ${r.model || ''}`,
            r.problem_description,
            r.status,
            r.priority || '–û–±—ã—á–Ω–∞—è',
            formatDate(r.created_at)
        ])
    ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');

    const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `–∑–∞—è–≤–∫–∏_${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ sidebar
function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) sidebar.classList.toggle('active');
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    localStorage.removeItem('access_token');
    localStorage.removeItem('user');
    window.location.replace('/auth/login');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã—Ö–æ–¥–∞
function setupLogoutHandlers() {
    document.querySelectorAll('a[href="#logout"]').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            logout();
        });
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
window.onclick = function(event) {
    if (event.target.classList.contains('modal')) {
        event.target.style.display = 'none';
    }
}

console.log('‚úÖ –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');