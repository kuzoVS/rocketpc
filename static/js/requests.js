// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ - requests.js
console.log('üöÄ Requests JS –∑–∞–≥—Ä—É–∂–µ–Ω');

let allRequests = [];
let filteredRequests = [];
let currentPage = 1;
const itemsPerPage = 10;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º body
        document.getElementById('pageBody').style.display = 'block';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        await checkAuthentication();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        loadUserInfo();

        // –°–∫—Ä—ã–≤–∞–µ–º loader –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        hideLoaderAndShowContent();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏
        await loadRequests();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        initializeEventHandlers();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
}

function hideLoaderAndShowContent() {
    const loader = document.getElementById('authCheckLoader');
    const content = document.getElementById('dashboardContent');

    if (loader) loader.style.display = 'none';
    if (content) content.style.display = 'block';
}

function redirectToLogin() {
    window.location.replace('/auth/login');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫
async function loadRequests() {
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...');

    try {
        const token = localStorage.getItem('access_token');
        const response = await fetch('/dashboard/api/requests', {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.status === 401) {
            redirectToLogin();
            return;
        }

        if (response.ok) {
            allRequests = await response.json();
            filteredRequests = [...allRequests];
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allRequests.length} –∑–∞—è–≤–æ–∫`);

            updateRequestsTable();
            updateTableInfo();
        } else {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫
function updateRequestsTable() {
    const tbody = document.getElementById('requestsTableBody');
    if (!tbody) return;

    if (filteredRequests.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="9" style="text-align: center; padding: 3rem; color: rgba(255,255,255,0.6);">
                    üìù –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </td>
            </tr>
        `;
        return;
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageRequests = filteredRequests.slice(startIndex, endIndex);

    tbody.innerHTML = pageRequests.map(request => `
        <tr style="border-bottom: 1px solid rgba(255, 255, 255, 0.1);" onmouseover="this.style.background='rgba(0, 255, 255, 0.05)'" onmouseout="this.style.background='transparent'">
            <td style="padding: 1rem; font-weight: bold; color: #00ffff;">#${request.request_id}</td>
            <td style="padding: 1rem;">
                <div style="font-weight: 600;">${request.client_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                <div style="font-size: 0.85rem; color: rgba(255,255,255,0.6);">${request.client_phone || ''}</div>
            </td>
            <td style="padding: 1rem;">
                <div>${request.device_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                <div style="font-size: 0.85rem; color: rgba(255,255,255,0.6);">${request.brand ? `${request.brand} ${request.model || ''}` : ''}</div>
            </td>
            <td style="padding: 1rem; max-width: 200px;">
                <div style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" title="${request.problem_description || ''}">
                    ${truncateText(request.problem_description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ', 50)}
                </div>
            </td>
            <td style="padding: 1rem;">
                <span class="status-badge ${getStatusClass(request.status)}" style="
                    display: inline-block; padding: 0.25rem 0.75rem; border-radius: 20px;
                    font-size: 0.85rem; font-weight: 600;
                ">${request.status}</span>
            </td>
            <td style="padding: 1rem;">
                <span class="priority-badge ${getPriorityClass(request.priority)}" style="
                    display: inline-block; padding: 0.25rem 0.75rem; border-radius: 12px;
                    font-size: 0.8rem; font-weight: 600;
                ">${request.priority || '–û–±—ã—á–Ω–∞—è'}</span>
            </td>
            <td style="padding: 1rem;">
                <div>${request.estimated_cost ? `‚ÇΩ${formatMoney(request.estimated_cost)}` : '-'}</div>
                ${request.final_cost ? `<div style="font-size: 0.85rem; color: #00ff00;">–ò—Ç–æ–≥–æ: ‚ÇΩ${formatMoney(request.final_cost)}</div>` : ''}
            </td>
            <td style="padding: 1rem;">
                <div>${formatDate(request.created_at)}</div>
                <div style="font-size: 0.85rem; color: rgba(255,255,255,0.6);">${formatTime(request.created_at)}</div>
            </td>
            <td style="padding: 1rem; text-align: center;">
                <div style="display: flex; gap: 0.5rem; justify-content: center;">
                    <button onclick="editRequest('${request.request_id}')" class="btn btn-outline" style="
                        padding: 0.5rem; font-size: 0.8rem; min-width: auto;
                    " title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        ‚úèÔ∏è
                    </button>
                    <button onclick="viewRequestDetails('${request.request_id}')" class="btn btn-outline" style="
                        padding: 0.5rem; font-size: 0.8rem; min-width: auto;
                    " title="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏">
                        üëÅÔ∏è
                    </button>
                </div>
            </td>
        </tr>
    `).join('');

    updatePagination();
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
function applyFilters() {
    const statusFilter = document.getElementById('statusFilter').value;
    const deviceTypeFilter = document.getElementById('deviceTypeFilter').value;
    const searchFilter = document.getElementById('searchFilter').value.toLowerCase();

    filteredRequests = allRequests.filter(request => {
        const matchesStatus = !statusFilter || request.status === statusFilter;
        const matchesDeviceType = !deviceTypeFilter || request.device_type === deviceTypeFilter;
        const matchesSearch = !searchFilter ||
            request.request_id.toLowerCase().includes(searchFilter) ||
            (request.client_name && request.client_name.toLowerCase().includes(searchFilter)) ||
            (request.problem_description && request.problem_description.toLowerCase().includes(searchFilter));

        return matchesStatus && matchesDeviceType && matchesSearch;
    });

    currentPage = 1;
    updateRequestsTable();
    updateTableInfo();
}

function resetFilters() {
    document.getElementById('statusFilter').value = '';
    document.getElementById('deviceTypeFilter').value = '';
    document.getElementById('searchFilter').value = '';
    filteredRequests = [...allRequests];
    currentPage = 1;
    updateRequestsTable();
    updateTableInfo();
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
function updatePagination() {
    const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);
    const pagination = document.getElementById('pagination');

    if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
    }

    let paginationHTML = '';

    // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (currentPage > 1) {
        paginationHTML += `<button onclick="changePage(${currentPage - 1})" class="btn btn-outline">‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è</button>`;
    }

    // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
        const activeClass = i === currentPage ? 'btn' : 'btn btn-outline';
        paginationHTML += `<button onclick="changePage(${i})" class="${activeClass}">${i}</button>`;
    }

    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (currentPage < totalPages) {
        paginationHTML += `<button onclick="changePage(${currentPage + 1})" class="btn btn-outline">–°–ª–µ–¥—É—é—â–∞—è ‚Üí</button>`;
    }

    pagination.innerHTML = paginationHTML;
}

function changePage(page) {
    currentPage = page;
    updateRequestsTable();
}

function updateTableInfo() {
    const tableInfo = document.getElementById('tableInfo');
    if (tableInfo) {
        const total = allRequests.length;
        const filtered = filteredRequests.length;
        const showing = Math.min(itemsPerPage, filtered - (currentPage - 1) * itemsPerPage);

        if (total === filtered) {
            tableInfo.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ ${showing} –∏–∑ ${total} –∑–∞—è–≤–æ–∫`;
        } else {
            tableInfo.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ ${showing} –∏–∑ ${filtered} (–≤—Å–µ–≥–æ ${total}) –∑–∞—è–≤–æ–∫`;
        }
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
function editRequest(requestId) {
    const request = allRequests.find(r => r.request_id === requestId);
    if (!request) return;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('editRequestId').value = request.request_id;
    document.getElementById('editStatus').value = request.status;
    document.getElementById('editPriority').value = request.priority || '–û–±—ã—á–Ω–∞—è';
    document.getElementById('editEstimatedCost').value = request.estimated_cost || '';
    document.getElementById('editComment').value = '';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('editRequestModal').style.display = 'block';
}

function closeEditRequestModal() {
    document.getElementById('editRequestModal').style.display = 'none';
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
function openCreateRequestModal() {
    document.getElementById('createRequestModal').style.display = 'block';
}

function closeCreateRequestModal() {
    document.getElementById('createRequestModal').style.display = 'none';
    document.getElementById('createRequestForm').reset();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function initializeEventHandlers() {
    // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('editRequestForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        await updateRequest();
    });

    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    document.getElementById('createRequestForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        await createRequest();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    window.onclick = function(event) {
        const editModal = document.getElementById('editRequestModal');
        const createModal = document.getElementById('createRequestModal');

        if (event.target === editModal) {
            closeEditRequestModal();
        }
        if (event.target === createModal) {
            closeCreateRequestModal();
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ logout
    const logoutLinks = document.querySelectorAll('a[href="#logout"]');
    logoutLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            logout();
        });
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function updateRequest() {
    const requestId = document.getElementById('editRequestId').value;
    const status = document.getElementById('editStatus').value;
    const comment = document.getElementById('editComment').value;

    try {
        const token = localStorage.getItem('access_token');
        const response = await fetch(`/dashboard/api/requests/${requestId}/status`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status, comment })
        });

        if (response.ok) {
            showSuccess('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            closeEditRequestModal();
            await loadRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            const error = await response.json();
            showError(error.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function createRequest() {
    const formData = {
        client_name: document.getElementById('createClientName').value,
        phone: document.getElementById('createClientPhone').value,
        email: document.getElementById('createClientEmail').value,
        device_type: document.getElementById('createDeviceType').value,
        brand: document.getElementById('createBrand').value,
        model: document.getElementById('createModel').value,
        problem_description: document.getElementById('createProblemDescription').value,
        priority: document.getElementById('createPriority').value
    };

    try {
        const response = await fetch('/api/requests', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });

        if (response.ok) {
            const result = await response.json();
            showSuccess(`–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ù–æ–º–µ—Ä: ${result.id}`);
            closeCreateRequestModal();
            await loadRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            const error = await response.json();
            showError(error.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusClass(status) {
    const statusMap = {
        '–ü—Ä–∏–Ω—è—Ç–∞': 'status-new',
        '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': 'status-in-progress',
        '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π': 'status-pending',
        '–í —Ä–µ–º–æ–Ω—Ç–µ': 'status-in-progress',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'status-in-progress',
        '–ì–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–µ': 'status-completed',
        '–í—ã–¥–∞–Ω–∞': 'status-completed'
    };
    return statusMap[status] || 'status-new';
}

function getPriorityClass(priority) {
    const priorityMap = {
        '–ù–∏–∑–∫–∞—è': 'priority-low',
        '–û–±—ã—á–Ω–∞—è': 'priority-normal',
        '–í—ã—Å–æ–∫–∞—è': 'priority-high',
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è': 'priority-critical'
    };
    return priorityMap[priority] || 'priority-normal';
}

function formatDate(dateString) {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('ru-RU');
}

function formatTime(dateString) {
    if (!dateString) return '';
    return new Date(dateString).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
}

function formatMoney(amount) {
    return new Intl.NumberFormat('ru-RU').format(amount);
}

function truncateText(text, maxLength) {
    if (!text || text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) sidebar.classList.toggle('active');
}

function logout() {
    localStorage.removeItem('access_token');
    localStorage.removeItem('user');
    window.location.replace('/auth/login');
}

function viewRequestDetails(requestId) {
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const request = allRequests.find(r => r.request_id === requestId);
    if (request) {
        alert(`–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ${requestId}:\n\n–ö–ª–∏–µ–Ω—Ç: ${request.client_name}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${request.device_type}\n–ü—Ä–æ–±–ª–µ–º–∞: ${request.problem_description}\n–°—Ç–∞—Ç—É—Å: ${request.status}`);
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showSuccess(message) {
    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed; top: 20px; right: 20px; z-index: 10000;
        background: linear-gradient(45deg, #00ff00, #00cc00);
        color: #000; padding: 1rem 2rem; border-radius: 8px;
        font-weight: 600; animation: slideIn 0.3s ease-out;
    `;
    notification.textContent = `‚úÖ ${message}`;
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.remove();
    }, 3000);
}

function showError(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed; top: 20px; right: 20px; z-index: 10000;
        background: linear-gradient(45deg, #ff4444, #cc0000);
        color: #fff; padding: 1rem 2rem; border-radius: 8px;
        font-weight: 600; animation: slideIn 0.3s ease-out;
    `;
    notification.textContent = `‚ùå ${message}`;
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.remove();
    }, 5000);
}

console.log('‚úÖ Requests JS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        redirectToLogin();
    }
});

async function checkAuthentication() {
    const token = localStorage.getItem('access_token');
    if (!token) {
        throw new Error('No token found');
    }

    const response = await fetch('/auth/profile', {
        headers: { 'Authorization': `Bearer ${token}` }
    });

    if (!response.ok) {
        localStorage.removeItem('access_token');
        localStorage.removeItem('user');
        throw new Error('Token validation failed');
    }

    return await response.json();
}

function loadUserInfo() {
    try {
        const user = JSON.parse(localStorage.getItem('user') || '{}');

        const userName = document.getElementById('userName');
        const userRole = document.getElementById('userRole');
        const userAvatar = document.getElementById('userAvatar');

        if (userName && user.full_name) userName.textContent = user.full_name;
        if (userRole && user.role) {
            const roleMap = {
                'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
                'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                'master': '–ú–∞—Å—Ç–µ—Ä'
            };
            userRole.textContent = roleMap[user.role] || user.role;
        }
        if (userAvatar && user.full_name) {
            userAvatar.textContent = user.full_name.charAt(0).toUpperCase();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (user.role === 'admin' || user.role === 'director') {
            const usersMenuItem = document.getElementById('usersMenuItem');
            if (usersMenuItem) usersMenuItem.style.display = 'block';
        }
    } catch (