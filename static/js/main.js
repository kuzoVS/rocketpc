// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
function checkLogo() {
    const logoIcon = document.getElementById('logoIcon');
    const img = new Image();
    img.onload = function() {
        logoIcon.classList.add('has-logo');
    };
    img.onerror = function() {
        logoIcon.classList.remove('has-logo');
    };
    img.src = '/static/images/logo.png';
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function normalizePhone(phone) {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const digits = phone.replace(/\D/g, '');

    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É 7XXXXXXXXXX
    if (digits.length === 11 && digits.startsWith('8')) {
        return '7' + digits.substring(1);
    } else if (digits.length === 10) {
        return '7' + digits;
    } else if (digits.length === 11 && digits.startsWith('7')) {
        return digits;
    }

    return digits; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatPhone(phone) {
    const digits = phone.replace(/\D/g, '');
    if (digits.length === 11) {
        return `+${digits[0]} (${digits.substring(1, 4)}) ${digits.substring(4, 7)}-${digits.substring(7, 9)}-${digits.substring(9, 11)}`;
    }
    return phone;
}

// Modal functions
function openModal(modalId) {
    document.getElementById(modalId).style.display = 'block';
    document.body.style.overflow = 'hidden'; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω–∞
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
    document.body.style.overflow = 'auto'; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É

    // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if (modalId === 'statusModal') {
        const resultDiv = document.getElementById('statusResult');
        if (resultDiv) {
            resultDiv.innerHTML = '';
        }
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.notification').forEach(el => el.remove());

    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        background: ${type === 'error' ? 'rgba(255, 0, 0, 0.2)' : 'rgba(0, 255, 0, 0.2)'};
        border: 1px solid ${type === 'error' ? 'rgba(255, 0, 0, 0.3)' : 'rgba(0, 255, 0, 0.3)'};
        color: ${type === 'error' ? '#ff4444' : '#00ff00'};
        border-radius: 12px;
        z-index: 3000;
        animation: slideInRight 0.4s ease-out;
        max-width: 400px;
        word-wrap: break-word;
        backdrop-filter: blur(10px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    `;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.4s ease-out';
        setTimeout(() => notification.remove(), 400);
    }, 5000);
}

// –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const loading = document.createElement('div');
    loading.className = 'loading-overlay';
    loading.innerHTML = `
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <p style="margin-top: 1rem; color: #00ffff;">${message}</p>
        </div>
    `;
    loading.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        backdrop-filter: blur(5px);
    `;

    const loadingContent = loading.querySelector('.loading-content');
    loadingContent.style.cssText = `
        background: rgba(26, 26, 46, 0.9);
        padding: 2rem;
        border-radius: 12px;
        border: 1px solid rgba(0, 255, 255, 0.3);
        text-align: center;
        backdrop-filter: blur(10px);
    `;

    const spinner = loading.querySelector('.loading-spinner');
    spinner.style.cssText = `
        width: 40px;
        height: 40px;
        border: 3px solid rgba(0, 255, 255, 0.3);
        border-top: 3px solid #00ffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    `;

    document.body.appendChild(loading);
    return loading;
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoading() {
    const loadingOverlay = document.querySelector('.loading-overlay');
    if (loadingOverlay) {
        loadingOverlay.remove();
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏
function validateRequestForm(formData) {
    const errors = [];

    if (!formData.client_name || formData.client_name.trim().length < 2) {
        errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
    }

    if (!formData.phone || formData.phone.trim().length < 10) {
        errors.push('–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä');
    }

    if (!formData.device_type) {
        errors.push('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }

    if (!formData.problem_description || formData.problem_description.trim().length < 10) {
        errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    return errors;
}

// Handle request form submission
async function handleRequestSubmit(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const rawPhone = formData.get('phone');
    const normalizedPhone = normalizePhone(rawPhone);

    const data = {
        client_name: formData.get('clientName').trim(),
        phone: normalizedPhone, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        email: formData.get('email').trim() || '',
        device_type: formData.get('deviceType'),
        problem_description: formData.get('problemDescription').trim()
    };

    console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏:', data);
    console.log(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: "${rawPhone}" ‚Üí "${normalizedPhone}"`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = validateRequestForm(data);
    if (errors.length > 0) {
        showNotification(`–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ:\n${errors.join('\n')}`, 'error');
        return;
    }

    const loading = showLoading('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏...');

    try {
        const response = await fetch('/api/requests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });

        hideLoading();

        const responseText = await response.text();
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, responseText);

        let result;
        try {
            result = JSON.parse(responseText);
        } catch (parseError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
            showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞', 'error');
            return;
        }

        if (response.ok) {
            const successMessage = `‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: ${result.id}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formatPhone(normalizedPhone)}
üë§ –ö–ª–∏–µ–Ω—Ç: ${data.client_name}

–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.`;

            showNotification('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–æ–º–µ—Ä: ' + result.id, 'success');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            alert(successMessage);

            closeModal('requestModal');
            e.target.reset();

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
            setTimeout(() => {
                document.getElementById('requestId').value = result.id;
                openModal('statusModal');
            }, 1000);

        } else {
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏';

            if (result.detail) {
                if (typeof result.detail === 'string') {
                    errorMessage = result.detail;
                } else if (Array.isArray(result.detail)) {
                    errorMessage = result.detail.map(err => err.msg || err.message || err).join(', ');
                }
            }

            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorMessage);
            showNotification(errorMessage, 'error');
        }
    } catch (error) {
        hideLoading();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.', 'error');
    }
}

// Handle status form submission
async function handleStatusSubmit(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const requestId = formData.get('requestId').trim().toUpperCase();

    if (!requestId) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏', 'error');
        return;
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', requestId);

    const loading = showLoading('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...');

    try {
        const response = await fetch(`/api/requests/${requestId}/status`);

        hideLoading();

        const resultDiv = document.getElementById('statusResult');

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', data);

            const statusClass = getStatusClass(data.status);
            const formattedDate = new Date(data.created_at).toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            resultDiv.innerHTML = `
                <div class="status-result" style="margin-top: 20px;">
                    <h3 style="color: #00ffff; margin-bottom: 1rem;">üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ</h3>

                    <div style="display: grid; gap: 0.75rem;">
                        <div style="display: flex; justify-content: space-between; padding: 0.5rem; background: rgba(0, 255, 255, 0.05); border-radius: 8px;">
                            <strong>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</strong>
                            <span style="color: #00ffff;">${data.id}</span>
                        </div>

                        <div style="display: flex; justify-content: space-between; padding: 0.5rem; background: rgba(0, 255, 255, 0.05); border-radius: 8px;">
                            <strong>–ö–ª–∏–µ–Ω—Ç:</strong>
                            <span>${data.client_name}</span>
                        </div>

                        <div style="display: flex; justify-content: space-between; padding: 0.5rem; background: rgba(0, 255, 255, 0.05); border-radius: 8px;">
                            <strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong>
                            <span>${data.device_type}</span>
                        </div>

                        <div style="padding: 0.5rem; background: rgba(0, 255, 255, 0.05); border-radius: 8px;">
                            <strong>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</strong><br>
                            <span style="color: rgba(255,255,255,0.9);">${data.problem_description}</span>
                        </div>

                        <div style="display: flex; justify-content: space-between; padding: 0.5rem; background: rgba(0, 255, 255, 0.05); border-radius: 8px;">
                            <strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong>
                            <span>${formattedDate}</span>
                        </div>

                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem; background: rgba(0, 255, 255, 0.05); border-radius: 8px;">
                            <strong>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</strong>
                            <span class="status-badge ${statusClass}" style="margin-left: 1rem;">${data.status}</span>
                        </div>
                    </div>

                    <div style="margin-top: 1rem; padding: 1rem; background: rgba(0, 255, 255, 0.1); border-radius: 8px; border: 1px solid rgba(0, 255, 255, 0.2);">
                        <p style="margin: 0; font-size: 0.9rem; color: rgba(255,255,255,0.8);">
                            üí° <strong>–°–æ–≤–µ—Ç:</strong> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
                            –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
                        </p>
                    </div>
                </div>
            `;

            showNotification('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');

        } else if (response.status === 404) {
            resultDiv.innerHTML = `
                <div style="color: #ff6b6b; padding: 20px; border: 1px solid #ff6b6b; border-radius: 10px; margin-top: 20px; text-align: center;">
                    <h4 style="margin-top: 0;">‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h4>
                    <p>–ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º <strong>${requestId}</strong> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.</p>
                    <p style="font-size: 0.9rem; margin-bottom: 0;">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</p>
                </div>
            `;
            showNotification('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        } else {
            resultDiv.innerHTML = `
                <div style="color: #ff6b6b; padding: 20px; border: 1px solid #ff6b6b; border-radius: 10px; margin-top: 20px; text-align: center;">
                    <h4 style="margin-top: 0;">‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h4>
                    <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.</p>
                    <p style="font-size: 0.9rem; margin-bottom: 0;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
                </div>
            `;
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
        }
    } catch (error) {
        hideLoading();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);

        const resultDiv = document.getElementById('statusResult');
        resultDiv.innerHTML = `
            <div style="color: #ff6b6b; padding: 20px; border: 1px solid #ff6b6b; border-radius: 10px; margin-top: 20px; text-align: center;">
                <h4 style="margin-top: 0;">üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h4>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.</p>
                <p style="font-size: 0.9rem; margin-bottom: 0;">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</p>
            </div>
        `;
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

function getStatusClass(status) {
    const statusMap = {
        '–ü—Ä–∏–Ω—è—Ç–∞': 'status-accepted',
        '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': 'status-diagnosis',
        '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π': 'status-waiting',
        '–í —Ä–µ–º–æ–Ω—Ç–µ': 'status-repair',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'status-testing',
        '–ì–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–µ': 'status-ready',
        '–í—ã–¥–∞–Ω–∞': 'status-completed'
    };
    return statusMap[status] || 'status-accepted';
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    checkLogo();

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            if (event.target === modal) {
                const modalId = modal.id;
                closeModal(modalId);
            }
        });
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const openModals = document.querySelectorAll('.modal[style*="block"]');
            openModals.forEach(modal => {
                closeModal(modal.id);
            });
        }
    });

    // Handle request form submission
    const requestForm = document.getElementById('requestForm');
    if (requestForm) {
        requestForm.addEventListener('submit', handleRequestSubmit);
    }

    // Handle status form submission
    const statusForm = document.getElementById('statusForm');
    if (statusForm) {
        statusForm.addEventListener('submit', handleStatusSubmit);
    }

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const phoneInputs = document.querySelectorAll('input[type="tel"]');
    phoneInputs.forEach(input => {
        input.addEventListener('input', function(e) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ
            // –ù–æ —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–≤–æ–¥, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        });
    });
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .status-result {
        animation: fadeIn 0.5s ease-out;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
`;
document.head.appendChild(style);

console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π main.js –∑–∞–≥—Ä—É–∂–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤');