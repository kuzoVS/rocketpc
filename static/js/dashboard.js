// dashboard.js ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

let weeklyChart = null;
let statusChart = null;
let deviceChart = null;

window.addEventListener("DOMContentLoaded", () => {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dashboard...');
  loadDashboardStats();
  loadDashboardRequests();
  loadUserInfo();
  loadCharts();
  loadTopMasters();
  loadDeviceStats();
});

// üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadDashboardStats() {
  try {
    console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    const res = await fetch("/dashboard/api/stats/detailed", {
      credentials: "include"
    });

    if (res.status === 401) {
      console.log('‚ùå 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login');
      window.location.href = "/auth/login";
      return;
    }

    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${res.status}`);

    const stats = await res.json();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stats);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    updateStatCard("totalRequestsCount", stats.total_requests || 0, "üìä", "–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è");
    updateStatCard("activeRequestsCount", stats.active_requests || 0, "üî•", "–í —Ä–∞–±–æ—Ç–µ —Å–µ–π—á–∞—Å");
    updateStatCard("completedRequestsCount", stats.completed_this_month || 0, "‚Üë",
      `${stats.growth_percentage > 0 ? '+' : ''}${stats.growth_percentage || 0}% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É`);
    updateStatCard("monthlyRevenue", `${(stats.monthly_revenue || 0).toLocaleString('ru-RU')}‚ÇΩ`, "üíµ", "–û—Ü–µ–Ω–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥");
    updateStatCard("avgRepairTime", `${stats.avg_repair_time || 0}`, "üìà", "–¥–Ω–µ–π");
    updateStatCard("avgCost", `${(stats.avg_cost || 0).toLocaleString('ru-RU')}‚ÇΩ`, "üìä", "–ó–∞ —Ä–µ–º–æ–Ω—Ç");

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    updateStatCard("totalRequestsCount", 0, "üìä", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    updateStatCard("activeRequestsCount", 0, "üî•", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    updateStatCard("completedRequestsCount", 0, "‚Üë", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    updateStatCard("monthlyRevenue", "‚ÇΩ0", "üíµ", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    updateStatCard("avgRepairTime", "0", "üìà", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    updateStatCard("avgCost", "‚ÇΩ0", "üìä", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
  }
}

function updateStatCard(elementId, value, icon, change) {
  const element = document.getElementById(elementId);
  if (element) {
    element.textContent = value;
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ${elementId}: ${value}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    const changeElement = element.closest('.stat-card').querySelector('.stat-change');
    if (changeElement) {
      changeElement.innerHTML = `<span>${icon}</span> ${change}`;
    }
  } else {
    console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
}

// üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤
async function loadTopMasters() {
  try {
    console.log('üèÜ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤...');
    const res = await fetch("/dashboard/api/stats/detailed", {
      credentials: "include"
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤");

    const stats = await res.json();
    const topMasters = stats.top_masters || [];

    console.log('‚úÖ –¢–æ–ø –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', topMasters);
    renderTopMasters(topMasters);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤:", err);
    renderTopMasters([]);
  }
}

function renderTopMasters(masters) {
  const container = document.getElementById('topMastersList');
  if (!container) {
    console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä topMastersList –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  if (!masters.length) {
    container.innerHTML = `
      <div style="text-align: center; color: rgba(255,255,255,0.6);">
        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Å—Ç–µ—Ä–∞—Ö</p>
      </div>`;
    return;
  }

  container.innerHTML = masters.map((master, index) => `
    <div style="display: flex; justify-content: space-between; align-items: center;
                padding: 0.75rem; background: rgba(0, 255, 255, 0.05);
                border-radius: 8px; margin-bottom: 0.5rem; border: 1px solid rgba(0, 255, 255, 0.1);">
      <div style="display: flex; align-items: center; gap: 0.75rem;">
        <div style="width: 32px; height: 32px; background: linear-gradient(45deg, #00ffff, #0099ff);
                    border-radius: 50%; display: flex; align-items: center; justify-content: center;
                    font-weight: bold; color: #000; font-size: 14px;">
          ${index + 1}
        </div>
        <div>
          <div style="font-weight: 600; color: #00ffff;">${master.full_name}</div>
          <div style="font-size: 0.85rem; color: rgba(255,255,255,0.6);">
            ${master.completed_repairs || 0} —Ä–µ–º–æ–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü
          </div>
        </div>
      </div>
      <div style="text-align: right; font-size: 0.85rem; color: rgba(255,255,255,0.8);">
        <div>${(master.avg_days || 0).toFixed(1)} –¥–Ω–µ–π</div>
        <div style="color: rgba(255,255,255,0.5);">—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
      </div>
    </div>
  `).join('');

  console.log('‚úÖ –¢–æ–ø –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
}

// üì± –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
async function loadDeviceStats() {
  try {
    console.log('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º...');
    const res = await fetch("/dashboard/api/stats/devices", {
      credentials: "include"
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤");

    const deviceStats = await res.json();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', deviceStats);
    renderDeviceStats(deviceStats);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", err);
    renderDeviceStats([]);
  }
}

function renderDeviceStats(devices) {
  const container = document.getElementById('deviceStatsList');
  if (!container) {
    console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä deviceStatsList –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  if (!devices.length) {
    container.innerHTML = `
      <div style="text-align: center; color: rgba(255,255,255,0.6);">
        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</p>
      </div>`;
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const deviceIcons = {
    '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π –ü–ö': 'üñ•Ô∏è',
    '–ù–æ—É—Ç–±—É–∫': 'üíª',
    '–ú–æ–Ω–æ–±–ª–æ–∫': 'üñ•Ô∏è',
    '–°–µ—Ä–≤–µ—Ä': 'üóÑÔ∏è',
    '–î—Ä—É–≥–æ–µ': 'üì±'
  };

  container.innerHTML = devices.slice(0, 5).map(device => `
    <div style="display: flex; justify-content: space-between; align-items: center;
                padding: 0.75rem; background: rgba(0, 255, 255, 0.05);
                border-radius: 8px; margin-bottom: 0.5rem; border: 1px solid rgba(0, 255, 255, 0.1);">
      <div style="display: flex; align-items: center; gap: 0.75rem;">
        <div style="font-size: 1.5rem;">
          ${deviceIcons[device.device_type] || 'üì±'}
        </div>
        <div>
          <div style="font-weight: 600; color: #00ffff;">${device.device_type}</div>
          <div style="font-size: 0.85rem; color: rgba(255,255,255,0.6);">
            ${device.count || 0} –∑–∞—è–≤–æ–∫ –∑–∞ –º–µ—Å—è—Ü
          </div>
        </div>
      </div>
      <div style="text-align: right; font-size: 0.85rem; color: rgba(255,255,255,0.8);">
        <div style="color: #00ff00;">${device.completed || 0} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
        <div style="color: rgba(255,255,255,0.5);">
          ‚ÇΩ${(device.avg_cost || 0).toLocaleString('ru-RU')}
        </div>
      </div>
    </div>
  `).join('');

  console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞');
}

// üßæ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫
async function loadDashboardRequests() {
  try {
    console.log('üßæ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏...');
    const res = await fetch("/dashboard/api/requests", {
      credentials: "include"
    });

    if (res.status === 401) {
      console.log('‚ùå 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login');
      window.location.href = "/auth/login";
      return;
    }

    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: ${res.status}`);

    const requests = await res.json();
    console.log('‚úÖ –ó–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', requests.length);
    renderRequestsTable(requests.slice(0, 5));
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:", err);
    renderRequestsTable([]);
  }
}

// üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function loadUserInfo() {
  try {
    console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
    const res = await fetch("/auth/profile", {
      credentials: "include"
    });

    if (res.status === 401) {
      console.log('‚ùå 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login');
      window.location.href = "/auth/login";
      return;
    }

    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${res.status}`);

    const user = await res.json();
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω:', user);

    const userName = document.getElementById('userName');
    const userRole = document.getElementById('userRole');
    const userAvatar = document.getElementById('userAvatar');

    if (userName && user.full_name) {
      userName.textContent = user.full_name;
    }

    if (userRole && user.role) {
      const roleMap = {
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
        'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        'master': '–ú–∞—Å—Ç–µ—Ä'
      };
      userRole.textContent = roleMap[user.role] || user.role;
    }

    if (userAvatar && user.full_name) {
      userAvatar.textContent = user.full_name.charAt(0).toUpperCase();
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
    if (user.role === 'admin' || user.role === 'director') {
      const usersMenuItem = document.getElementById('usersMenuItem');
      if (usersMenuItem) usersMenuItem.style.display = 'block';
    }

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
  }
}

function createWeeklyChart(data) {
    const canvas = document.getElementById('weeklyChart');
    if (!canvas) {
        console.warn('‚ö†Ô∏è Canvas weeklyChart –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const ctx = canvas.getContext('2d');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    const rect = canvas.getBoundingClientRect();
    canvas.width = rect.width * window.devicePixelRatio;
    canvas.height = rect.height * window.devicePixelRatio;
    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
    drawEnhancedLineChart(ctx, {
        labels: data.labels || ['29.05', '30.05', '31.05', '01.06', '02.06', '03.06', '04.06'],
        datasets: [
            {
                label: '–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏',
                data: data.requests || [5, 8, 12, 7, 15, 10, 6],
                color: '#00ffff',
                fillColor: 'rgba(0, 255, 255, 0.1)'
            },
            {
                label: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
                data: data.completed || [3, 6, 9, 5, 11, 8, 4],
                color: '#00ff00',
                fillColor: 'rgba(0, 255, 0, 0.1)'
            }
        ]
    }, rect.width, rect.height);

    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é —Å–æ–∑–¥–∞–Ω');
}

function createStatusChart(statusData) {
    const canvas = document.getElementById('statusChart');
    if (!canvas) {
        console.warn('‚ö†Ô∏è Canvas statusChart –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const ctx = canvas.getContext('2d');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    const rect = canvas.getBoundingClientRect();
    canvas.width = rect.width * window.devicePixelRatio;
    canvas.height = rect.height * window.devicePixelRatio;
    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);

    // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∏–∑ API
    const data = statusData.length ? statusData : [
        { status: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', count: 2 },
        { status: '–í—ã–¥–∞–Ω–∞', count: 1 },
        { status: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π', count: 1 }
    ];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    drawEnhancedPieChart(ctx, data, rect.width, rect.height);

    // –°–æ–∑–¥–∞–µ–º –ª–µ–≥–µ–Ω–¥—É —Å–Ω–∏–∑—É
    createPieChartLegend(data);

    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–∑–¥–∞–Ω');
}


function drawEnhancedPieChart(ctx, data, width, height) {
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, width, height);

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É, –æ—Å—Ç–∞–≤–ª—è—è –º–µ—Å—Ç–æ —Å–Ω–∏–∑—É –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
    const centerX = width / 2;
    const centerY = height / 2 - 20; // –ù–µ–º–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞–µ–º –≤–≤–µ—Ä—Ö –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
    const radius = Math.min(centerX, centerY) - 40; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å

    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    const colors = {
        '–ü—Ä–∏–Ω—è—Ç–∞': '#00ffff',
        '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': '#0099ff',
        '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π': '#ffff00',
        '–í —Ä–µ–º–æ–Ω—Ç–µ': '#ff9800',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': '#9c27b0',
        '–ì–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–µ': '#4caf50',
        '–í—ã–¥–∞–Ω–∞': '#00ff00'
    };

    const total = data.reduce((sum, item) => sum + item.count, 0);

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (total === 0) {
        ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', width/2, height/2);
        return;
    }

    let currentAngle = -Math.PI / 2; // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É

    data.forEach((item, index) => {
        const sliceAngle = (item.count / total) * 2 * Math.PI;
        const color = colors[item.status] || `hsl(${index * 60}, 70%, 60%)`;

        // –†–∏—Å—É–µ–º —Å–µ–≥–º–µ–Ω—Ç —Å —Ç–µ–Ω—å—é
        ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
        ctx.shadowBlur = 10;
        ctx.shadowOffsetX = 2;
        ctx.shadowOffsetY = 2;

        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
        ctx.lineTo(centerX, centerY);
        ctx.fillStyle = color;
        ctx.fill();

        // –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω—å –¥–ª—è –æ–±–≤–æ–¥–∫–∏
        ctx.shadowColor = 'transparent';
        ctx.strokeStyle = '#1a1a2e';
        ctx.lineWidth = 3;
        ctx.stroke();

        // –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å—å –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π
        if (sliceAngle > 0.2) {
            const labelAngle = currentAngle + sliceAngle / 2;
            const labelRadius = radius * 0.7;
            const labelX = centerX + Math.cos(labelAngle) * labelRadius;
            const labelY = centerY + Math.sin(labelAngle) * labelRadius;

            ctx.fillStyle = '#000';
            ctx.font = 'bold 16px Arial';
            ctx.textAlign = 'center';
            ctx.fillText(item.count, labelX, labelY + 5);
        }

        currentAngle += sliceAngle;
    });

    // –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ (–±–æ–ª—å—à–µ)
    const innerRadius = radius * 0.45;
    ctx.beginPath();
    ctx.arc(centerX, centerY, innerRadius, 0, Math.PI * 2);
    ctx.fillStyle = '#1a1a2e';
    ctx.fill();
    ctx.strokeStyle = '#00ffff';
    ctx.lineWidth = 3;
    ctx.stroke();

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ü–µ–Ω—Ç—Ä–µ (–±–æ–ª—å—à–∏–π —à—Ä–∏—Ñ—Ç)
    ctx.fillStyle = '#00ffff';
    ctx.font = 'bold 28px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(total, centerX, centerY - 5);
    ctx.font = '14px Arial';
    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    ctx.fillText('–∑–∞—è–≤–æ–∫', centerX, centerY + 20);
}

function drawEnhancedLineChart(ctx, chartData, width, height) {
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, width, height);

    const padding = 60;
    const chartWidth = width - padding * 2;
    const chartHeight = height - padding * 2;

    const labels = chartData.labels;
    const datasets = chartData.datasets;

    if (!labels.length) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', width/2, height/2);
        return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const maxValue = Math.max(...datasets.flatMap(d => d.data)) || 10;
    const stepX = chartWidth / (labels.length - 1);
    const stepY = chartHeight / maxValue;

    // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
    drawGrid(ctx, padding, chartWidth, chartHeight, maxValue, labels.length);

    // –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    datasets.forEach((dataset, index) => {
        drawDataLine(ctx, dataset, padding, stepX, stepY, chartHeight, index);
    });

    // –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
    drawAxisLabels(ctx, labels, padding, stepX, chartHeight, maxValue, stepY);

    // –ù–ï —Ä–∏—Å—É–µ–º –ª–µ–≥–µ–Ω–¥—É –≤–Ω—É—Ç—Ä–∏ canvas - –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ HTML —Å–Ω–∏–∑—É
    // –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ drawBottomLegend
}


function drawGrid(ctx, padding, chartWidth, chartHeight, maxValue, labelCount) {
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
    ctx.lineWidth = 1;

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = 0; i < labelCount; i++) {
        const x = padding + (i * chartWidth / (labelCount - 1));
        ctx.beginPath();
        ctx.moveTo(x, padding);
        ctx.lineTo(x, padding + chartHeight);
        ctx.stroke();
    }

    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    const gridLines = 5;
    for (let i = 0; i <= gridLines; i++) {
        const y = padding + (i * chartHeight / gridLines);
        ctx.beginPath();
        ctx.moveTo(padding, y);
        ctx.lineTo(padding + chartWidth, y);
        ctx.stroke();
    }
}

function drawBottomLegend(ctx, datasets, width, height, padding) {
    const legendY = height - 30;
    const legendStartX = width / 2 - (datasets.length * 100) / 2;

    datasets.forEach((dataset, index) => {
        const x = legendStartX + index * 150;

        // –¶–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
        ctx.fillStyle = dataset.color;
        ctx.fillRect(x, legendY, 15, 15);

        // –ü–æ–¥–ø–∏—Å—å
        ctx.fillStyle = '#ffffff';
        ctx.font = '14px Arial';
        ctx.textAlign = 'left';
        ctx.fillText(dataset.label, x + 25, legendY + 12);
    });
}

function drawDataLine(ctx, dataset, padding, stepX, stepY, chartHeight, index) {
    const { data, color, fillColor } = dataset;

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ª–∏–≤–∫–∏
    if (fillColor) {
        const gradient = ctx.createLinearGradient(0, padding, 0, padding + chartHeight);
        gradient.addColorStop(0, fillColor);
        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');

        // –†–∏—Å—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–¥ –ª–∏–Ω–∏–µ–π
        ctx.beginPath();
        ctx.moveTo(padding, padding + chartHeight);

        data.forEach((value, i) => {
            const x = padding + i * stepX;
            const y = padding + chartHeight - (value * stepY);
            if (i === 0) ctx.lineTo(x, y);
            else ctx.lineTo(x, y);
        });

        ctx.lineTo(padding + (data.length - 1) * stepX, padding + chartHeight);
        ctx.closePath();
        ctx.fillStyle = gradient;
        ctx.fill();
    }

    // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é
    ctx.beginPath();
    ctx.strokeStyle = color;
    ctx.lineWidth = 3;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';

    data.forEach((value, i) => {
        const x = padding + i * stepX;
        const y = padding + chartHeight - (value * stepY);

        if (i === 0) ctx.moveTo(x, y);
        else ctx.lineTo(x, y);
    });

    ctx.stroke();

    // –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏
    data.forEach((value, i) => {
        const x = padding + i * stepX;
        const y = padding + chartHeight - (value * stepY);

        // –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥
        ctx.beginPath();
        ctx.arc(x, y, 6, 0, Math.PI * 2);
        ctx.fillStyle = color;
        ctx.fill();

        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥
        ctx.beginPath();
        ctx.arc(x, y, 3, 0, Math.PI * 2);
        ctx.fillStyle = '#1a1a2e';
        ctx.fill();

        // –ü–æ–¥–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è
        ctx.fillStyle = color;
        ctx.font = 'bold 12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(value, x, y - 12);
    });
}

function drawAxisLabels(ctx, labels, padding, stepX, chartHeight, maxValue, stepY) {
    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    ctx.font = '12px Arial';
    ctx.textAlign = 'center';

    // –ü–æ–¥–ø–∏—Å–∏ X-–æ—Å–∏
    labels.forEach((label, i) => {
        const x = padding + i * stepX;
        ctx.fillText(label, x, padding + chartHeight + 20);
    });

    // –ü–æ–¥–ø–∏—Å–∏ Y-–æ—Å–∏
    ctx.textAlign = 'right';
    const gridLines = 5;
    for (let i = 0; i <= gridLines; i++) {
        const value = Math.round((maxValue / gridLines) * (gridLines - i));
        const y = padding + (i * chartHeight / gridLines) + 4;
        ctx.fillText(value, padding - 10, y);
    }
}

function drawLegend(ctx, datasets, width, padding) {
    const legendY = 20;
    let legendX = width - 200;

    datasets.forEach((dataset, index) => {
        const y = legendY + index * 25;

        // –¶–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
        ctx.fillStyle = dataset.color;
        ctx.fillRect(legendX, y, 15, 15);

        // –ü–æ–¥–ø–∏—Å—å
        ctx.fillStyle = '#ffffff';
        ctx.font = '14px Arial';
        ctx.textAlign = 'left';
        ctx.fillText(dataset.label, legendX + 25, y + 12);
    });
}

function createPieChartLegend(data) {
    const canvas = document.getElementById('statusChart');
    if (!canvas) return;

    const container = canvas.parentElement;

    // –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ –ª–µ–≥–µ–Ω–¥—ã
    const oldLegends = container.querySelectorAll('.bottom-chart-legend, .side-chart-legend');
    oldLegends.forEach(legend => legend.remove());

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã –°–¢–†–û–ì–û –°–ù–ò–ó–£
    const legendContainer = document.createElement('div');
    legendContainer.className = 'bottom-chart-legend';
    legendContainer.style.cssText = `
        display: flex !important;
        justify-content: center !important;
        gap: 2rem;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid rgba(0, 255, 255, 0.1);
        flex-wrap: wrap;
        position: static !important;
        width: 100% !important;
    `;

    const colors = {
        '–ü—Ä–∏–Ω—è—Ç–∞': '#00ffff',
        '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': '#0099ff',
        '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π': '#ffff00',
        '–í —Ä–µ–º–æ–Ω—Ç–µ': '#ff9800',
        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': '#9c27b0',
        '–ì–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–µ': '#4caf50',
        '–í—ã–¥–∞–Ω–∞': '#00ff00'
    };

    data.forEach((item, index) => {
        const color = colors[item.status] || `hsl(${index * 60}, 70%, 60%)`;

        const legendItem = document.createElement('div');
        legendItem.style.cssText = `
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.8);
        `;

        legendItem.innerHTML = `
            <div style="
                width: 16px;
                height: 16px;
                background: ${color};
                border-radius: 3px;
                border: 1px solid rgba(255, 255, 255, 0.2);
                flex-shrink: 0;
            "></div>
            <span>${item.status}</span>
        `;

        legendContainer.appendChild(legendItem);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –≤ –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (—Å–Ω–∏–∑—É)
    container.appendChild(legendContainer);
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
function animateCharts() {
    const charts = [
        { id: 'weeklyChart', delay: 0 },
        { id: 'statusChart', delay: 200 }
    ];

    charts.forEach(chart => {
        const canvas = document.getElementById(chart.id);
        if (canvas) {
            canvas.style.opacity = '0';
            canvas.style.transform = 'scale(0.8)';
            canvas.style.transition = 'all 0.6s ease';

            setTimeout(() => {
                canvas.style.opacity = '1';
                canvas.style.transform = 'scale(1)';
            }, chart.delay);
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadCharts
async function loadCharts() {
    try {
        console.log('üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        const [weeklyData, statsData] = await Promise.all([
            fetch("/dashboard/api/charts/weekly", { credentials: "include" }).then(r => r.json()),
            fetch("/dashboard/api/stats/detailed", { credentials: "include" }).then(r => r.json())
        ]);

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        createWeeklyChart(weeklyData);
        createStatusChart(statsData.status_stats || []);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        animateCharts();

    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:", err);
        createPlaceholderCharts();
    }
}

function createPlaceholderCharts() {
    console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤');

    const weeklyCanvas = document.getElementById('weeklyChart');
    const statusCanvas = document.getElementById('statusChart');

    if (weeklyCanvas) {
        const ctx = weeklyCanvas.getContext('2d');
        const rect = weeklyCanvas.getBoundingClientRect();
        weeklyCanvas.width = rect.width * window.devicePixelRatio;
        weeklyCanvas.height = rect.height * window.devicePixelRatio;
        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);

        ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
        ctx.fillRect(0, 0, rect.width, rect.height);
        ctx.fillStyle = '#ffffff';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', rect.width/2, rect.height/2);
    }

    if (statusCanvas) {
        const ctx = statusCanvas.getContext('2d');
        const rect = statusCanvas.getBoundingClientRect();
        statusCanvas.width = rect.width * window.devicePixelRatio;
        statusCanvas.height = rect.height * window.devicePixelRatio;
        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);

        ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
        ctx.fillRect(0, 0, rect.width, rect.height);
        ctx.fillStyle = '#ffffff';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', rect.width/2, rect.height/2);
    }
}

// üñäÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
function renderRequestsTable(requests) {
  const tbody = document.getElementById("recentRequestsTable");

  if (!tbody) {
    console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç recentRequestsTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  if (!requests.length) {
    tbody.innerHTML = `
      <tr>
        <td colspan="8" style="text-align: center; color: rgba(255,255,255,0.6); padding: 2rem;">
          –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        </td>
      </tr>`;
    return;
  }

  tbody.innerHTML = requests.map(r => `
    <tr>
      <td style="color: #00ffff; font-weight: bold;">#${r.request_id || '‚Äî'}</td>
      <td>${r.client_name || '‚Äî'}</td>
      <td>${r.device_type || '‚Äî'}</td>
      <td title="${r.problem_description || ''}">${(r.problem_description || '').slice(0, 40)}${(r.problem_description || '').length > 40 ? '...' : ''}</td>
      <td><span class="status-badge ${getStatusClass(r.status)}">${r.status || '‚Äî'}</span></td>
      <td>${r.master_name || '‚Äî'}</td>
      <td>${r.created_at ? new Date(r.created_at).toLocaleDateString('ru-RU') : '‚Äî'}</td>
      <td>
        <a href="/dashboard/requests" class="btn btn-outline" style="padding: 4px 8px; font-size: 0.85rem;">
          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
        </a>
      </td>
    </tr>
  `).join('');

  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

function getStatusClass(status) {
  const statusMap = {
    '–ü—Ä–∏–Ω—è—Ç–∞': 'status-new',
    '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': 'status-in-progress',
    '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π': 'status-pending',
    '–í —Ä–µ–º–æ–Ω—Ç–µ': 'status-in-progress',
    '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'status-in-progress',
    '–ì–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–µ': 'status-completed',
    '–í—ã–¥–∞–Ω–∞': 'status-completed'
  };
  return statusMap[status] || 'status-new';
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
async function loadWeeklyChart() {
  try {
    const data = await fetch("/dashboard/api/charts/weekly", { credentials: "include" }).then(r => r.json());
    createWeeklyChart(data);
    console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:", err);
  }
}

async function loadMonthlyChart() {
  try {
    const data = await fetch("/dashboard/api/charts/monthly", { credentials: "include" }).then(r => r.json());
    createWeeklyChart(data); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ —Å –º–µ—Å—è—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:", err);
  }
}

// –£—Ç–∏–ª–∏—Ç—ã
function logout() {
  console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  window.location.href = "/logout";
}

function toggleSidebar() {
  const sidebar = document.getElementById('sidebar');
  if (sidebar) {
    sidebar.classList.toggle('active');
    console.log('üì± Sidebar –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function refreshDashboard() {
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ dashboard...');
  loadDashboardStats();
  loadDashboardRequests();
  loadCharts();
  loadTopMasters();
  loadDeviceStats();
}

function setActiveButton(button) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ
    const parent = button.parentElement;
    const buttons = parent.querySelectorAll('.btn-chart-toggle');
    buttons.forEach(btn => btn.classList.remove('active'));

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    button.classList.add('active');
}
console.log('‚úÖ Dashboard.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');