// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeDashboard() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dashboard...');

    const token = localStorage.getItem('access_token');
    if (!token) {
        console.log('‚ùå –¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç –≤ localStorage');
        redirectToLogin();
        return;
    }

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º body
        document.getElementById('pageBody').style.display = 'block';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞...');
        const response = await fetch('/auth/profile', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
            clearTokensAndRedirect();
            return;
        }

        const userData = await response.json();
        console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userData.username);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        loadUserInfo();

        // –°–∫—Ä—ã–≤–∞–µ–º loader –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        hideLoaderAndShowContent();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadDashboardData();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        setTimeout(() => {
            drawWeeklyChart();
            drawStatusChart();
        }, 500);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        clearTokensAndRedirect();
    }
}

function redirectToLogin() {
    console.log('üö™ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ login...');
    window.location.replace('/auth/login');
}

function clearTokensAndRedirect() {
    localStorage.removeItem('access_token');
    localStorage.removeItem('user');
    redirectToLogin();
}

function hideLoaderAndShowContent() {
    console.log('üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dashboard –∫–æ–Ω—Ç–µ–Ω—Ç...');

    const loader = document.getElementById('authCheckLoader');
    const content = document.getElementById('dashboardContent');

    if (loader) loader.style.display = 'none';
    if (content) content.style.display = 'block';
}

function loadUserInfo() {
    try {
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', user.username);

        const userName = document.getElementById('userName');
        const userRole = document.getElementById('userRole');
        const userAvatar = document.getElementById('userAvatar');

        if (userName && user.full_name) {
            userName.textContent = user.full_name;
        }

        if (userRole && user.role) {
            const roleMap = {
                'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
                'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                'master': '–ú–∞—Å—Ç–µ—Ä'
            };
            userRole.textContent = roleMap[user.role] || user.role;
        }

        if (userAvatar && user.full_name) {
            userAvatar.textContent = user.full_name.charAt(0).toUpperCase();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (user.role === 'admin' || user.role === 'director') {
            const usersMenuItem = document.getElementById('usersMenuItem');
            if (usersMenuItem) usersMenuItem.style.display = 'block';
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
}

async function loadDashboardData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö dashboard...');

    const token = localStorage.getItem('access_token');
    if (!token) return;

    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏
        const response = await fetch('/dashboard/api/requests', {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.status === 401) {
            clearTokensAndRedirect();
            return;
        }

        if (response.ok) {
            const requests = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', requests.length, '–∑–∞—è–≤–æ–∫');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateStats(requests);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            updateRequestsTable(requests.slice(0, 5));
        } else {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º demo');
            showDemoData();
        }
    } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º demo data');
        showDemoData();
    }
}

function updateStats(requests) {
    const activeCount = requests.filter(r => r.status !== '–í—ã–¥–∞–Ω–∞').length;
    const completedCount = requests.filter(r => r.status === '–í—ã–¥–∞–Ω–∞').length;

    document.getElementById('activeRequestsCount').textContent = activeCount;
    document.getElementById('completedRequestsCount').textContent = completedCount;
    document.getElementById('monthlyRevenue').textContent = `‚ÇΩ${(completedCount * 5000).toLocaleString()}`;
    document.getElementById('avgRepairTime').textContent = '3—á';
}

function updateRequestsTable(requests) {
    const tbody = document.getElementById('recentRequestsTable');
    if (!tbody || !requests.length) {
        showDemoData();
        return;
    }

    tbody.innerHTML = requests.map(request => `
        <tr>
            <td>#${request.request_id || 'N/A'}</td>
            <td>${request.client_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
            <td>${request.device_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
            <td>${(request.problem_description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ').substring(0, 30)}...</td>
            <td><span class="status-badge status-new">${request.status || '–ü—Ä–∏–Ω—è—Ç–∞'}</span></td>
            <td>${request.master_name || '-'}</td>
            <td>${request.created_at ? new Date(request.created_at).toLocaleDateString('ru-RU') : 'N/A'}</td>
            <td><button class="btn btn-outline" style="padding: 0.25rem 0.5rem; font-size: 0.85rem;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button></td>
        </tr>
    `).join('');
}

function showDemoData() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º demo —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('activeRequestsCount').textContent = '12';
    document.getElementById('completedRequestsCount').textContent = '85';
    document.getElementById('monthlyRevenue').textContent = '‚ÇΩ425 000';
    document.getElementById('avgRepairTime').textContent = '3—á';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º demo —Ç–∞–±–ª–∏—Ü—É
    const tbody = document.getElementById('recentRequestsTable');
    if (tbody) {
        tbody.innerHTML = `
            <tr>
                <td>#RQ2A4F</td>
                <td>–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</td>
                <td>–ù–æ—É—Ç–±—É–∫ ASUS</td>
                <td>–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è</td>
                <td><span class="status-badge status-new">–ü—Ä–∏–Ω—è—Ç–∞</span></td>
                <td>-</td>
                <td>30.05.2025</td>
                <td><button class="btn btn-outline" style="padding: 0.25rem 0.5rem; font-size: 0.85rem;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button></td>
            </tr>
            <tr>
                <td>#RQ1B3E</td>
                <td>–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞</td>
                <td>–ü–ö</td>
                <td>–ü–µ—Ä–µ–≥—Ä–µ–≤–∞–µ—Ç—Å—è</td>
                <td><span class="status-badge status-in-progress">–í —Ä–µ–º–æ–Ω—Ç–µ</span></td>
                <td>–ê–ª–µ–∫—Å–µ–π</td>
                <td>29.05.2025</td>
                <td><button class="btn btn-outline" style="padding: 0.25rem 0.5rem; font-size: 0.85rem;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button></td>
            </tr>
        `;
    }
}

function drawWeeklyChart() {
    const canvas = document.getElementById('weeklyChart');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    ctx.fillStyle = "#00ffff";
    ctx.font = "16px Arial";
    ctx.fillText("–ì—Ä–∞—Ñ–∏–∫ –∑–∞—è–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é", 20, 30);
    ctx.fillText("(–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)", 20, 60);
}

function drawStatusChart() {
    const canvas = document.getElementById('statusChart');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    ctx.fillStyle = "#00ffff";
    ctx.font = "16px Arial";
    ctx.fillText("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º", 20, 30);
    ctx.fillText("(–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)", 20, 60);
}

function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) sidebar.classList.toggle('active');
}

function logout() {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    localStorage.removeItem('access_token');
    localStorage.removeItem('user');
    window.location.replace('/auth/login');
}

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', function() {
    const logoutLinks = document.querySelectorAll('a[href="#logout"]');
    logoutLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            logout();
        });
    });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
document.addEventListener('DOMContentLoaded', initializeDashboard);

console.log('‚úÖ Dashboard —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');