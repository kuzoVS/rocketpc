from fastapi import APIRouter, HTTPException, Depends
from typing import List, Dict, Optional
from pydantic import BaseModel, Field
from datetime import datetime
from decimal import Decimal
from datetime import date
from app.models import RepairRequest, StatusResponse, StatusUpdate
from app.database_pg import db
from app.config import settings
from app.auth import verify_token, require_role

router = APIRouter(prefix="/requests", tags=["requests"])


# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
class CreateRequestModel(BaseModel):
    client_name: str = Field(..., min_length=2, max_length=100)
    phone: str = Field(..., min_length=10, max_length=20)
    email: str = Field(default="", max_length=100)
    device_type: str = Field(..., min_length=2, max_length=50)
    brand: str = Field(default="", max_length=50)
    model: str = Field(default="", max_length=100)
    problem_description: str = Field(..., min_length=10, max_length=1000)
    priority: str = Field(default="–û–±—ã—á–Ω–∞—è")
    assigned_master_id: Optional[int] = None  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏

    class Config:
        json_schema_extra = {
            "example": {
                "client_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                "phone": "+7 (999) 123-45-67",
                "email": "ivan@example.com",
                "device_type": "–ù–æ—É—Ç–±—É–∫",
                "brand": "ASUS",
                "model": "VivoBook 15",
                "problem_description": "–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è",
                "priority": "–û–±—ã—á–Ω–∞—è"
            }
        }


# –ú–æ–¥–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
class AssignMasterModel(BaseModel):
    master_id: int
    comment: Optional[str] = None


# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
class UpdateRequestModel(BaseModel):
    status: Optional[str] = None
    priority: Optional[str] = None
    estimated_cost: Optional[float] = None
    comment: Optional[str] = None
    problem_description: Optional[str] = Field(None, min_length=10, max_length=1000)


@router.post("/", response_model=dict)
async def create_request(request: CreateRequestModel, token_data: Optional[Dict] = Depends(verify_token)):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ.
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_data = {
            "full_name": request.client_name,
            "phone": request.phone,
            "email": request.email
        }

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_data = {
            "device_type": request.device_type,
            "brand": request.brand,
            "model": request.model,
            "problem_description": request.problem_description,
            "priority": request.priority
        }

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        created_by_id = None
        if token_data:
            created_by_id = int(token_data.get("sub"))

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        request_id = await db.create_repair_request(client_data, device_data, created_by_id)

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –º–∞—Å—Ç–µ—Ä, –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ
        if request.assigned_master_id and token_data:
            await db.assign_master_to_request(
                request_id,
                request.assigned_master_id,
                created_by_id
            )

        return {
            "id": request_id,
            "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            "status": "success"
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.get("/{request_id}/status", response_model=StatusResponse)
async def get_request_status(request_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ø–æ ID (–æ—Ç–∫—Ä—ã—Ç—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç).
    """
    request_data = await db.get_repair_request(request_id)

    if not request_data:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return StatusResponse(
        id=request_data["request_id"],
        client_name=request_data["client_name"],
        device_type=request_data["device_type"],
        problem_description=request_data["problem_description"],
        status=request_data["status"],
        created_at=request_data["created_at"]
    )


@router.get("/", response_model=List[dict])
async def get_all_requests(
        token_data: Dict = Depends(verify_token),
        include_archived: bool = False
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    try:
        requests = await db.get_all_repair_requests(include_archived)
        return requests
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        return []


@router.put("/{request_id}")
async def update_request(
        request_id: str,
        update_data: UpdateRequestModel,
        token_data: Dict = Depends(verify_token)
):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if update_data.status:
            if update_data.status not in settings.REPAIR_STATUSES:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(settings.REPAIR_STATUSES)}"
                )

            success = await db.update_request_status(
                request_id=request_id,
                new_status=update_data.status,
                user_id=int(token_data["sub"]),
                comment=update_data.comment
            )

            if not success:
                raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        if update_data.problem_description:
            await db.update_problem_description(request_id, update_data.problem_description)

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Ç.–¥.

        return {"message": "–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")


@router.post("/{request_id}/assign-master")
async def assign_master(
        request_id: str,
        assignment: AssignMasterModel,
        token_data: Dict = Depends(require_role(["admin", "director", "manager"]))
):
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É.
    """
    try:
        success = await db.assign_master_to_request(
            request_id=request_id,
            master_id=assignment.master_id,
            assigned_by_id=int(token_data["sub"])
        )

        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if assignment.comment:
            await db.update_request_status(
                request_id=request_id,
                new_status=(await db.get_repair_request(request_id))["status"],
                user_id=int(token_data["sub"]),
                comment=f"–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä: {assignment.comment}"
            )

        return {"message": "–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω"}

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞")


@router.delete("/{request_id}/assign-master")
async def unassign_master(
        request_id: str,
        reason: Optional[str] = None,
        token_data: Dict = Depends(require_role(["admin", "director", "manager"]))
):
    """
    –°–Ω—è—Ç–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Å –∑–∞—è–≤–∫–∏.
    """
    try:
        success = await db.unassign_master_from_request(request_id, reason)

        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")

        return {"message": "–ú–∞—Å—Ç–µ—Ä —Å–Ω—è—Ç —Å –∑–∞—è–≤–∫–∏"}

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º–∞—Å—Ç–µ—Ä–∞")


@router.get("/masters/available")
async def get_available_masters(token_data: Dict = Depends(verify_token)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.
    """
    try:
        masters = await db.get_available_masters()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        for master in masters:
            master["skills"] = await db.get_master_skills(master["id"])

        return masters
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        return []


@router.get("/masters/{master_id}/workload")
async def get_master_workload(
        master_id: int,
        token_data: Dict = Depends(verify_token)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞.
    """
    try:
        workload = await db.get_master_workload(master_id)
        return workload
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


@router.get("/dashboard/masters")
async def get_masters_dashboard(
        token_data: Dict = Depends(require_role(["admin", "director", "manager"]))
):
    """
    Dashboard –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–∞—Ö.
    """
    try:
        dashboard_data = await db.get_masters_dashboard()
        return dashboard_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è dashboard: {e}")
        return []


@router.delete("/{request_id}")
async def archive_request(
        request_id: str,
        token_data: Dict = Depends(require_role(["admin", "director"]))
):
    """
    –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.
    """
    success = await db.archive_request(request_id)

    if not success:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return {"message": "–ó–∞—è–≤–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}


@router.get("/stats/summary")
async def get_requests_stats(token_data: Dict = Depends(verify_token)):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞—è–≤–∫–∞–º.
    """
    try:
        stats = await db.get_statistics()
        return stats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


class UpdateRequestFullModel(BaseModel):
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    device_type: Optional[str] = Field(None, min_length=2, max_length=50)
    brand: Optional[str] = Field(None, max_length=50)
    model: Optional[str] = Field(None, max_length=100)
    serial_number: Optional[str] = Field(None, max_length=100)

    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    problem_description: Optional[str] = Field(None, min_length=10, max_length=1000)

    # –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    status: Optional[str] = None
    priority: Optional[str] = None

    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    estimated_cost: Optional[float] = Field(None, ge=0)
    final_cost: Optional[float] = Field(None, ge=0)

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    estimated_completion: Optional[date] = None
    repair_duration_hours: Optional[float] = Field(None, ge=0)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    warranty_period: Optional[int] = Field(None, ge=0, le=365)
    parts_used: Optional[str] = None
    notes: Optional[str] = None

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é
    comment: Optional[str] = None


# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
class UpdateClientModel(BaseModel):
    full_name: Optional[str] = Field(None, min_length=2, max_length=100)
    phone: Optional[str] = Field(None, min_length=10, max_length=20)
    email: Optional[str] = Field(None, max_length=100)
    address: Optional[str] = None


@router.get("/{request_id}/full")
async def get_request_full(
        request_id: str,
        token_data: Dict = Depends(verify_token)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        request_data = await db.get_repair_request_full(request_id)

        if not request_data:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        status_history = await db.get_status_history(request_id)
        request_data['status_history'] = status_history

        return request_data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.put("/{request_id}/full")
async def update_request_full(
        request_id: str,
        update_data: UpdateRequestFullModel,
        token_data: Dict = Depends(verify_token)
):
    """
    –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if update_data.status:
            valid_statuses = [
                '–ü—Ä–∏–Ω—è—Ç–∞', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π',
                '–í —Ä–µ–º–æ–Ω—Ç–µ', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ì–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–µ', '–í—ã–¥–∞–Ω–∞'
            ]
            if update_data.status not in valid_statuses:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_statuses)}"
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if update_data.priority:
            valid_priorities = ['–ù–∏–∑–∫–∞—è', '–û–±—ã—á–Ω–∞—è', '–í—ã—Å–æ–∫–∞—è', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è']
            if update_data.priority not in valid_priorities:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_priorities)}"
                )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_dict = {}
        for field, value in update_data.dict(exclude_unset=True).items():
            if value is not None and field != 'comment':
                update_dict[field] = value

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if update_data.comment:
            update_dict['comment'] = update_data.comment

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        success = await db.update_repair_request_full(
            request_id=request_id,
            update_data=update_dict,
            user_id=int(token_data["sub"])
        )

        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        return {"message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", "updated_fields": list(update_dict.keys())}

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")


@router.put("/{request_id}/client")
async def update_request_client(
        request_id: str,
        client_data: UpdateClientModel,
        token_data: Dict = Depends(verify_token)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∑–∞—è–≤–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
        request_info = await db.get_repair_request(request_id)
        if not request_info:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        client_update = {}
        for field, value in client_data.dict(exclude_unset=True).items():
            if value is not None:
                client_update[field] = value

        if not client_update:
            return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å client_id –∏–∑ –∑–∞—è–≤–∫–∏
        success = await db.update_client_info(
            client_id=request_info['client_id'],
            client_data=client_update
        )

        if not success:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")

        return {"message": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.get("/{request_id}/history")
async def get_request_history(
        request_id: str,
        token_data: Dict = Depends(verify_token)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏
    """
    try:
        history = await db.get_status_history(request_id)
        return history
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")