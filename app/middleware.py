# app/middleware.py - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
from fastapi import Request, HTTPException
from fastapi.responses import RedirectResponse
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
import re
from app.auth import verify_token, verify_token_from_cookie, decode_token_from_cookie


class AuthenticationMiddleware(BaseHTTPMiddleware):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è middleware"""

    def __init__(self, app):
        super().__init__(app)

    async def dispatch(self, request: Request, call_next):
        path = request.url.path
        method = request.method

        # –°–∫—Ä—ã–≤–∞–µ–º .well-known –∑–∞–ø—Ä–æ—Å—ã
        if path.startswith('/.well-known/'):
            return Response(status_code=404, content="Not Found")

        if not path.startswith('/static/'):
            print(f"üì° {method} {path}")

        # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        public_paths = [
            '/',
            '/health',
            '/api',
            '/logout',
            '/api/requests',  # POST —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
        is_public = (
                path in public_paths or
                path.startswith('/static/') or
                path.startswith('/auth/') or
                (path.startswith('/api/requests/') and path.endswith('/status'))
        )

        if is_public:
            print(f"üåê –ü—É–±–ª–∏—á–Ω—ã–π –ø—É—Ç—å: {path}")
            return await call_next(request)

        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print(f"üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –ø—É—Ç—å: {path}")
        authenticated = await self.check_cookie_auth(request)

        if not authenticated:
            # HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —Ä–µ–¥–∏—Ä–µ–∫—Ç
            if not path.startswith('/api/') and not path.startswith('/dashboard/api/'):
                print(f"üîÅ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ login –¥–ª—è HTML: {path}")
                return RedirectResponse(url="/auth/login")
            # API - 401
            else:
                print(f"üö´ 401 –¥–ª—è API: {path}")
                return Response(status_code=401, content="Authentication required")

        print(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è: {path}")
        return await call_next(request)

    async def check_cookie_auth(self, request: Request) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ cookie"""
        try:
            token_data = decode_token_from_cookie(request)
            username = token_data.get('username', 'unknown')
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)[:100]}")
            return False