# app/middleware.py
from fastapi import Request, HTTPException
from fastapi.responses import RedirectResponse
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
import re
from app.auth import verify_token, verify_token_from_cookie, decode_token_from_cookie


class AuthenticationMiddleware(BaseHTTPMiddleware):
    """–°—Ç—Ä–æ–≥–∏–π middleware –¥–ª—è server-side –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""

    def __init__(self, app):
        super().__init__(app)
        # –ú–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.protected_paths = [
            r'^/dashboard/api/.*',  # –¢–æ–ª—å–∫–æ API dashboard —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω
        ]

        # –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–≤–∫–ª—é—á–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã dashboard)
        self.public_paths = [
            r'^/$',
            r'^/auth/.*',
            r'^/api/requests$',
            r'^/api/requests/.*/status$',
            r'^/static/.*',
            r'^/health$',
            r'^/api$',
            r'^/logout$',
            r'^/.well-known/.*',
            r'^/dashboard$',  # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ dashboard
            r'^/dashboard/requests$',  # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            r'^/dashboard/users$',  # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            r'^/dashboard/statistics$',  # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        ]

    async def dispatch(self, request: Request, call_next):
        path = request.url.path
        method = request.method

        if path.startswith('/.well-known/'):
            return Response(status_code=404, content="Not Found")

        if not path.startswith('/static/'):
            print(f"üì° {method} {path}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        authenticated = await self.verify_api_token(request)

        # API ‚Äî —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç 401
        if self.is_protected_path(path):
            print(f"üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç: {path}")
            if not authenticated:
                print(f"üö´ 401 - –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API")
                return Response(status_code=401, content="Authentication required")

        # –°—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç
        if not self.is_public_path(path):
            if not authenticated:
                print(f"üîÅ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {path} ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /auth/login")
                return RedirectResponse(url="/auth/login")

        return await call_next(request)

    def is_public_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
        for pattern in self.public_paths:
            if re.match(pattern, path):
                return True
        return False

    def is_protected_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º (—Ç–æ–ª—å–∫–æ API)"""
        for pattern in self.protected_paths:
            if re.match(pattern, path):
                return True
        return False

    async def verify_api_token(self, request: Request) -> bool:
        try:
            token_data = decode_token_from_cookie(request)
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ cookie: {token_data['username']}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie: {e}")
            return False