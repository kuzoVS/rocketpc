# app/middleware.py
from fastapi import Request, HTTPException
from fastapi.responses import RedirectResponse
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
import re
from app.auth import verify_token


class AuthenticationMiddleware(BaseHTTPMiddleware):
    """–°—Ç—Ä–æ–≥–∏–π middleware –¥–ª—è server-side –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""

    def __init__(self, app):
        super().__init__(app)
        # –ú–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.protected_paths = [
            r'^/dashboard/api/.*',  # –¢–æ–ª—å–∫–æ API dashboard —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω
        ]

        # –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–≤–∫–ª—é—á–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã dashboard)
        self.public_paths = [
            r'^/$',
            r'^/auth/.*',
            r'^/api/requests$',
            r'^/api/requests/.*/status$',
            r'^/static/.*',
            r'^/health$',
            r'^/api$',
            r'^/logout$',
            r'^/.well-known/.*',
            r'^/dashboard$',  # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ dashboard
            r'^/dashboard/requests$',  # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            r'^/dashboard/users$',  # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            r'^/dashboard/statistics$',  # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        ]

    async def dispatch(self, request: Request, call_next):
        path = request.url.path
        method = request.method

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º Chrome DevTools –∑–∞–ø—Ä–æ—Å—ã
        if path.startswith('/.well-known/'):
            response = Response(status_code=404)
            response.headers["content-type"] = "text/plain"
            return response

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if not path.startswith('/static/'):
            print(f"üì° {method} {path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã dashboard
        if self.is_protected_path(path):
            print(f"üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç: {path}")

            # –°—Ç—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è API
            if not await self.verify_api_token(request):
                print(f"üö´ 401 - –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API")
                raise HTTPException(status_code=401, detail="Authentication required")

        response = await call_next(request)
        return response

    def is_protected_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º (—Ç–æ–ª—å–∫–æ API)"""
        for pattern in self.protected_paths:
            if re.match(pattern, path):
                return True
        return False

    async def verify_api_token(self, request: Request) -> bool:
        """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            auth_header = request.headers.get("Authorization")
            if not auth_header or not auth_header.startswith("Bearer "):
                return False

            token = auth_header.split(" ")[1]

            class MockCredentials:
                def __init__(self, token):
                    self.credentials = token

            credentials = MockCredentials(token)
            verify_token(credentials)
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ç–æ–∫–µ–Ω–∞: {e}")
            return False