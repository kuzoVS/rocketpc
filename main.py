from fastapi import FastAPI, Request, HTTPException, Depends, Query
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from contextlib import asynccontextmanager
import uvicorn
import os
from typing import Dict, Optional
from app.routers import clients
from app.routers import main, requests, auth, dashboard
from app.config import settings
from app.database_pg import db
from app.auth import verify_token_from_cookie, require_role_cookie, clear_auth_cookie
from app.middleware import AuthenticationMiddleware
from fastapi import Form

@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ROCKET PC...")

    if not os.path.exists("static"):
        os.makedirs("static")
        os.makedirs("static/images")
        os.makedirs("static/css")
        os.makedirs("static/js")
        os.makedirs("static/uploads")

    if not os.path.exists("templates"):
        os.makedirs("templates")
        os.makedirs("templates/auth")
        os.makedirs("templates/dashboard")

    try:
        await db.connect()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PostgreSQL")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

    yield

    print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await db.disconnect()

app = FastAPI(
    title=settings.APP_TITLE,
    description=settings.APP_DESCRIPTION,
    version=settings.APP_VERSION,
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(AuthenticationMiddleware)

app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")

app.include_router(main.router)
app.include_router(requests.router, prefix="/api")
app.include_router(auth.router)
app.include_router(clients.router, prefix="/api")

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard_page(request: Request):
    return templates.TemplateResponse("dashboard/dashboard.html", {"request": request, "page": "dashboard"})

@app.get("/dashboard/requests", response_class=HTMLResponse)
async def dashboard_requests(request: Request):
    return templates.TemplateResponse("dashboard/requests.html", {"request": request, "page": "requests"})

@app.get("/dashboard/users", response_class=HTMLResponse)
async def dashboard_users(request: Request):
    return RedirectResponse(url="/dashboard", status_code=302)

@app.get("/dashboard/schedule", response_class=HTMLResponse)
async def dashboard_statistics(request: Request):
    return RedirectResponse(url="/dashboard", status_code=302)

@app.get("/dashboard/clients", response_class=HTMLResponse)
async def dashboard_statistics(request: Request):
    return templates.TemplateResponse("dashboard/clients.html", {"request": request, "page": "clients"})


@app.get("/dashboard/api/masters/available")
async def get_available_masters_api(token_data: Dict = Depends(verify_token_from_cookie)):
    try:
        masters = await db.get_available_masters()
        for master in masters:
            master["skills"] = await db.get_master_skills(master["id"])
        return masters
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        return []

@app.post("/dashboard/api/requests/{request_id}/assign-master")
async def assign_master_api(request_id: str, assignment_data: dict, token_data: Dict = Depends(require_role_cookie(["admin", "director", "manager"]))):
    try:
        success = await db.assign_master_to_request(
            request_id=request_id,
            master_id=assignment_data.get("master_id"),
            assigned_by_id=int(token_data["sub"])
        )
        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return {"message": "–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞")

@app.delete("/dashboard/api/requests/{request_id}/unassign-master")
async def unassign_master_api(request_id: str, token_data: Dict = Depends(require_role_cookie(["admin", "director", "manager"]))):
    try:
        success = await db.unassign_master_from_request(request_id)
        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
        return {"message": "–ú–∞—Å—Ç–µ—Ä —Å–Ω—è—Ç —Å –∑–∞—è–≤–∫–∏"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º–∞—Å—Ç–µ—Ä–∞")

@app.get("/dashboard/api/masters/{master_id}/workload")
async def get_master_workload_api(master_id: int, token_data: Dict = Depends(verify_token_from_cookie)):
    try:
        workload = await db.get_master_workload(master_id)
        return workload
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

@app.get("/dashboard/api/masters/dashboard")
async def get_masters_dashboard_api(token_data: Dict = Depends(require_role_cookie(["admin", "director", "manager"]))):
    try:
        dashboard_data = await db.get_masters_dashboard()
        return dashboard_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è dashboard: {e}")
        return []

@app.post("/dashboard/api/requests")
async def create_request_dashboard_api(request_data: dict, token_data: Dict = Depends(verify_token_from_cookie)):
    try:
        client_data = {
            "full_name": request_data.get("client_name"),
            "phone": request_data.get("phone"),
            "email": request_data.get("email", "")
        }
        device_data = {
            "device_type": request_data.get("device_type"),
            "brand": request_data.get("brand", ""),
            "model": request_data.get("model", ""),
            "problem_description": request_data.get("problem_description"),
            "priority": request_data.get("priority", "–û–±—ã—á–Ω–∞—è")
        }
        request_id = await db.create_repair_request(client_data, device_data, int(token_data["sub"]))

        if request_data.get("assigned_master_id"):
            await db.assign_master_to_request(request_id, request_data["assigned_master_id"], int(token_data["sub"]))

        return {
            "id": request_id,
            "message": "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
            "status": "success"
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")

@app.get("/dashboard/api/requests")
async def get_dashboard_requests(token_data: Dict = Depends(verify_token_from_cookie)):
    try:
        all_requests = await db.get_all_repair_requests()
        recent_requests = sorted(all_requests, key=lambda r: r['created_at'], reverse=True)
        return recent_requests[:5]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏")


@app.get("/dashboard/api/stats")
async def dashboard_api_stats(token_data: Dict = Depends(verify_token_from_cookie)):
    try:
        print(f"üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {token_data.get('username')}")
        stats = await db.get_statistics()
        all_requests = await db.get_all_repair_requests()
        active_requests = len([r for r in all_requests if r['status'] != '–í—ã–¥–∞–Ω–∞' and not r['is_archived']])
        completed_requests = len([r for r in all_requests if r['status'] == '–í—ã–¥–∞–Ω–∞'])
        stats.update({
            'active_requests': active_requests,
            'completed_requests': completed_requests,
            'monthly_revenue': completed_requests * 5000,
            'avg_repair_time': 3
        })
        return stats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'active_requests': 0,
            'completed_requests': 0,
            'monthly_revenue': 0,
            'avg_repair_time': 0
        }


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ä–æ—É—Ç—ã –≤ main.py –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ—É—Ç–æ–≤

from app.routers import clients

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
app.include_router(clients.router, prefix="/api")

# –ò–ª–∏ –µ—Å–ª–∏ —Ä–æ—É—Ç—ã clients –µ—â–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ API –º–µ—Ç–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é:

@app.get("/api/clients")
async def get_clients_api(token_data: Dict = Depends(verify_token_from_cookie)):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        print(f"üë• –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {token_data.get('username')}")
        clients = await db.get_all_clients(include_stats=True)
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return clients
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

@app.get("/api/clients/statistics")
async def get_clients_statistics_api(token_data: Dict = Depends(verify_token_from_cookie)):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        print(f"üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {token_data.get('username')}")
        stats = await db.get_client_statistics()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
        return stats
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", repr(e))  # –î–æ–±–∞–≤–∏–ª–∏ repr
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@app.get("/api/clients/{client_id}")
async def get_client_api(client_id: int, token_data: Dict = Depends(verify_token_from_cookie)):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID"""
    try:
        print(f"üë§ –ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {token_data.get('username')}")
        client = await db.get_client_by_id(client_id)
        if not client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
        requests = await db.get_client_requests(client_id)
        client['requests'] = requests

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = await db.get_client_device_types(client_id)
        client['device_types'] = devices

        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–∞–π–¥–µ–Ω: {client['full_name']}")
        return client
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


@app.get("/api/clients/{client_id}/requests")
async def get_client_requests_api(
        client_id: int,
        limit: Optional[int] = Query(None, description="–õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫"),
        token_data: Dict = Depends(verify_token_from_cookie)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        print(f"üìã –ó–∞–ø—Ä–æ—Å –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {token_data.get('username')}")
        requests = await db.get_client_requests(client_id, limit)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        return requests
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


@app.post("/api/clients")
async def create_client_api(
        client_data: dict,
        token_data: Dict = Depends(require_role_cookie(["admin", "director", "manager"]))
):
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        print(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {token_data.get('username')}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: {client_data}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not client_data.get('full_name') or len(client_data['full_name'].strip()) < 2:
            raise HTTPException(status_code=400, detail="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")

        if not client_data.get('phone') or len(client_data['phone'].strip()) < 10:
            raise HTTPException(status_code=400, detail="–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")

        client_id = await db.create_client(
            full_name=client_data['full_name'].strip(),
            phone=client_data['phone'].strip(),
            email=client_data.get('email', '').strip() or None,
            address=client_data.get('address', '').strip() or None
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if client_data.get('is_vip') or client_data.get('notes'):
            update_data = {}
            if client_data.get('is_vip'):
                update_data['is_vip'] = bool(client_data['is_vip'])
            if client_data.get('notes'):
                update_data['notes'] = client_data['notes'].strip()

            if update_data:
                await db.update_client(client_id, update_data)

        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {client_id}")
        return {"id": client_id, "message": "–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")


@app.put("/api/clients/{client_id}")
async def update_client_api(
        client_id: int,
        client_data: dict,
        token_data: Dict = Depends(verify_token_from_cookie)
):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    try:
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {token_data.get('username')}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {client_data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        existing_client = await db.get_client_by_id(client_id)
        if not existing_client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = {}
        for field, value in client_data.items():
            if value is not None and str(value).strip():
                if field in ['full_name', 'phone', 'email', 'address', 'notes']:
                    update_data[field] = str(value).strip()
                elif field == 'is_vip':
                    update_data[field] = bool(value)

        if not update_data:
            return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}

        success = await db.update_client(client_id, update_data)
        if not success:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")

        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
        return {"message": "–ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")


@app.delete("/api/clients/{client_id}")
async def delete_client_api(
        client_id: int,
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {token_data.get('username')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        existing_client = await db.get_client_by_id(client_id)
        if not existing_client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        success = await db.delete_client(client_id)
        if not success:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏"
            )

        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} —É–¥–∞–ª–µ–Ω")
        return {"message": "–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")

@app.put("/dashboard/api/requests/{request_id}/status")
async def update_request_status_api(request_id: str, status_data: dict, token_data: Dict = Depends(verify_token_from_cookie)):
    try:
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {request_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {token_data.get('username')}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        success = await db.update_request_status(
            request_id=request_id,
            new_status=status_data["status"],
            user_id=int(token_data["sub"]),
            comment=status_data.get("comment")
        )

        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # üÜï –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
        if "problem_description" in status_data and status_data["problem_description"]:
            await db.update_problem_description(request_id, status_data["problem_description"])

        return {"message": "–°—Ç–∞—Ç—É—Å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@app.post("/dashboard/api/requests/{request_id}/archive")
async def archive_request_api(request_id: str, token_data: Dict = Depends(require_role_cookie(["admin", "director", "manager"]))):
    try:
        print(f"üíÑ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ {request_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {token_data.get('username')}")
        success = await db.archive_request(request_id)
        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return {"message": "–ó–∞—è–≤–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

app.include_router(dashboard.router)

@app.get("/dashboard/api/stats/detailed")
async def get_detailed_stats(token_data: Dict = Depends(verify_token_from_cookie)):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        print(f"üìä –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {token_data.get('username')}")
        stats = await db.get_detailed_statistics()
        return stats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_requests': 0,
            'active_requests': 0,
            'completed_this_month': 0,
            'completed_last_month': 0,
            'growth_percentage': 0,
            'avg_cost': 0,
            'avg_repair_time': 0,
            'status_stats': [],
            'priority_stats': [],
            'top_masters': [],
            'monthly_revenue': 0
        }

@app.get("/dashboard/api/charts/weekly")
async def get_weekly_chart(token_data: Dict = Depends(verify_token_from_cookie)):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        chart_data = await db.get_weekly_chart_data()
        return chart_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return {
            'labels': [],
            'requests': [],
            'completed': []
        }

@app.get("/dashboard/api/charts/monthly")
async def get_monthly_chart(token_data: Dict = Depends(verify_token_from_cookie)):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"""
    try:
        chart_data = await db.get_monthly_chart_data()
        return chart_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {
            'labels': [],
            'requests': [],
            'completed': []
        }

@app.get("/dashboard/api/stats/devices")
async def get_device_stats(token_data: Dict = Depends(verify_token_from_cookie)):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        device_stats = await db.get_device_type_stats()
        return device_stats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return []

@app.get("/dashboard/api/stats/masters")
async def get_masters_performance(token_data: Dict = Depends(verify_token_from_cookie)):
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤"""
    try:
        masters_data = await db.get_masters_dashboard()
        return masters_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        return []

@app.get("/auth/login", response_class=HTMLResponse)
async def login_page(request: Request):
    return templates.TemplateResponse("auth/login.html", {"request": request})

@app.get("/logout")
async def logout():
    response = RedirectResponse(url="/auth/login", status_code=302)
    clear_auth_cookie(response)
    return response

@app.get("/api")
async def api_root():
    return {
        "message": "ROCKET PC Service Center API",
        "version": settings.APP_VERSION,
        "status": "online"
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "database": "connected" if db.pool else "disconnected"
    }

@app.get("/", response_class=HTMLResponse)
async def root():
    return RedirectResponse(url="/auth/login", status_code=302)

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    if request.url.path.startswith("/api"):
        return JSONResponse(status_code=404, content={"detail": "Endpoint not found"})
    html_content = """..."""  # unchanged for brevity
    return HTMLResponse(content=html_content, status_code=404)

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: Exception):
    print(f"üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {exc}")
    if request.url.path.startswith("/api"):
        return JSONResponse(status_code=500, content={"detail": "Internal server error"})
    html_content = """..."""  # unchanged for brevity
    return HTMLResponse(content=html_content, status_code=500)


@app.get("/dashboard/api/requests/{request_id}/full")
async def get_request_full_api(request_id: str, token_data: Dict = Depends(verify_token_from_cookie)):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ"""
    try:
        request_data = await db.get_repair_request_full(request_id)

        if not request_data:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        status_history = await db.get_status_history(request_id)
        request_data['status_history'] = status_history

        return request_data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@app.put("/dashboard/api/requests/{request_id}/full")
async def update_request_full_api(request_id: str, update_data: dict,
                                  token_data: Dict = Depends(verify_token_from_cookie)):
    """API –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    from datetime import datetime, date

    try:
        print(f"üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {request_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {token_data.get('username')}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if 'status' in update_data and update_data['status']:
            valid_statuses = [
                '–ü—Ä–∏–Ω—è—Ç–∞', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π',
                '–í —Ä–µ–º–æ–Ω—Ç–µ', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ì–æ—Ç–æ–≤–∞ –∫ –≤—ã–¥–∞—á–µ', '–í—ã–¥–∞–Ω–∞'
            ]
            if update_data['status'] not in valid_statuses:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_statuses)}"
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if 'priority' in update_data and update_data['priority']:
            valid_priorities = ['–ù–∏–∑–∫–∞—è', '–û–±—ã—á–Ω–∞—è', '–í—ã—Å–æ–∫–∞—è', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è']
            if update_data['priority'] not in valid_priorities:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_priorities)}"
                )

        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        clean_data = {}
        for key, value in update_data.items():
            if value is not None and value != '':
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —á–∏—Å–ª–∞ –≤ —á–∏—Å–ª–∞
                if key in ['estimated_cost', 'final_cost', 'repair_duration_hours'] and isinstance(value, str):
                    try:
                        clean_data[key] = float(value) if value else None
                    except ValueError:
                        continue
                elif key == 'warranty_period' and isinstance(value, str):
                    try:
                        clean_data[key] = int(value) if value else None
                    except ValueError:
                        continue
                # üÜï –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–∞—Ç—ã estimated_completion
                elif key == 'estimated_completion' and isinstance(value, str):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                        datetime.strptime(value, '%Y-%m-%d')
                        clean_data[key] = value  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ë–î
                    except ValueError:
                        print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {value}")
                        continue
                else:
                    clean_data[key] = value

        print(f"üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {clean_data}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        success = await db.update_repair_request_full(
            request_id=request_id,
            update_data=clean_data,
            user_id=int(token_data["sub"])
        )

        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        return {
            "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            "updated_fields": list(clean_data.keys())
        }

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")


@app.put("/dashboard/api/requests/{request_id}/client")
async def update_request_client_api(request_id: str, client_data: dict,
                                    token_data: Dict = Depends(verify_token_from_cookie)):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    try:
        print(f"üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: {client_data}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
        request_info = await db.get_repair_request(request_id)
        if not request_info:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        client_update = {}
        for field, value in client_data.items():
            if value is not None and value != '':
                client_update[field] = value

        if not client_update:
            return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        success = await db.update_client_info(
            client_id=request_info['client_id'],
            client_data=client_update
        )

        if not success:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")

        return {"message": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@app.get("/dashboard/api/requests/{request_id}/history")
async def get_request_history_api(request_id: str, token_data: Dict = Depends(verify_token_from_cookie)):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏"""
    try:
        history = await db.get_status_history(request_id)
        return history
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG
    )
